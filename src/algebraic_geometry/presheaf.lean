-- Copyright (c) 2018 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Scott Morrison, Mario Carneiro, Reid Barton

import category_theory.instances.Top.opens
import category_theory.whiskering
import category_theory.natural_isomorphism

universes v u

open category_theory
open category_theory.instances
open topological_space

namespace algebraic_geometry

variables (C : Type u) [ùíû : category.{v+1} C]
include ùíû

def presheaf_on_space (X : Top.{v}) := (opens X)·µí·µñ ‚•§ C

instance category_presheaf_on_space (X : Top.{v}) : category (presheaf_on_space C X) :=
by dsimp [presheaf_on_space]; apply_instance

namespace presheaf_on_space
variables {C}

def pushforward {X Y : Top.{v}} (f : X ‚ü∂ Y) (‚Ñ± : presheaf_on_space C X) : presheaf_on_space C Y :=
(opens.map f).op ‚ãô ‚Ñ±

def pushforward_eq {X Y : Top.{v}} {f g : X ‚ü∂ Y} (h : f = g) (‚Ñ± : presheaf_on_space C X) :
  ‚Ñ±.pushforward f ‚âÖ ‚Ñ±.pushforward g :=
iso_whisker_right (nat_iso.op (opens.map_iso f g h).symm) ‚Ñ±
lemma pushforward_eq_eq {X Y : Top.{v}} {f g : X ‚ü∂ Y} (h‚ÇÅ h‚ÇÇ : f = g) (‚Ñ± : presheaf_on_space C X) :
  ‚Ñ±.pushforward_eq h‚ÇÅ = ‚Ñ±.pushforward_eq h‚ÇÇ :=
rfl

namespace pushforward
def id {X : Top.{v}} (‚Ñ± : presheaf_on_space C X) : ‚Ñ±.pushforward (ùüô X) ‚âÖ ‚Ñ± :=
(iso_whisker_right (nat_iso.op (opens.map_id X).symm) ‚Ñ±) ‚â™‚â´ functor.left_unitor _

@[simp] lemma id_hom_app' {X : Top.{v}} (‚Ñ± : presheaf_on_space C X) (U) (p) : (id ‚Ñ±).hom.app (op ‚ü®U, p‚ü©) = ‚Ñ±.map (ùüô (op ‚ü®U, p‚ü©)) :=
by { dsimp [id], simp, dsimp, simp }

@[simp] lemma id_hom_app {X : Top.{v}} (‚Ñ± : presheaf_on_space C X) (U) : (id ‚Ñ±).hom.app U = ‚Ñ±.map (eq_to_hom (opens.op_map_id_obj U)) :=
begin
  have w : U = op (unop U) := rfl,
  revert w,
  generalize : unop U = U',
  intro w,
  subst w,
  cases U',
  simp,
  erw category_theory.functor.map_id,
end

@[simp] lemma id_inv_app' {X : Top.{v}} (‚Ñ± : presheaf_on_space C X) (U) (p) : (id ‚Ñ±).inv.app (op ‚ü®U, p‚ü©) = ‚Ñ±.map (ùüô (op ‚ü®U, p‚ü©)) :=
by { dsimp [id], simp, dsimp, simp }

def comp {X Y Z : Top.{v}}  (‚Ñ± : presheaf_on_space C X) (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) : ‚Ñ±.pushforward (f ‚â´ g) ‚âÖ (‚Ñ±.pushforward f).pushforward g :=
iso_whisker_right (nat_iso.op (opens.map_comp f g).symm) ‚Ñ±

@[simp] lemma comp_hom_app {X Y Z : Top.{v}} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (‚Ñ± : presheaf_on_space C X) (U) : (comp ‚Ñ± f g).hom.app U = ùüô _ :=
begin
  dsimp [pushforward, comp],
  simp,
  erw category_theory.functor.map_id, -- FIXME simp should do this
  dsimp,
  simp,
end
@[simp] lemma comp_inv_app {X Y Z : Top.{v}} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (‚Ñ± : presheaf_on_space C X) (U) : (comp ‚Ñ± f g).inv.app U = ùüô _ :=
begin
  dsimp [pushforward, comp],
  simp,
  erw category_theory.functor.map_id,
  dsimp,
  simp,
end

end pushforward

end presheaf_on_space

end algebraic_geometry
