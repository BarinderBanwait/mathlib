import algebra.commute analysis.normed_space.basic analysis.specific_limits
  topology.metric_space.contracting

@[move_cast] lemma nnreal.coe_bit0 {r : nnreal} : ((bit0 r:nnreal):‚Ñù) = bit0 r := rfl
@[move_cast] lemma nnreal.coe_bit1 {r : nnreal} : ((bit1 r:nnreal):‚Ñù) = bit1 r := rfl

instance nonempty_monoid {M : Type*} [monoid M] : nonempty M := ‚ü®1‚ü©

open set filter
open_locale classical topological_space

lemma real.mul_csupr {Œπ : Type*} [nonempty Œπ] {f : Œπ ‚Üí ‚Ñù} (h : bdd_above (range f))
  {c : ‚Ñù} (hc : 0 ‚â§ c) :
  c * supr f = supr (Œª x, c * f x) :=
csupr_of_csupr_of_monotone_of_continuous (continuous_const.mul continuous_id)
  (monotone_mul_left_of_nonneg hc) h

noncomputable theory

structure quasi_mul_add_hom (M : Type*) [monoid M] (V : Type*) [normed_group V] :=
(to_fun : M ‚Üí V)
(cbd_bounded' : ‚àÉ C, ‚àÄ x y, dist (to_fun (x * y)) (to_fun x + to_fun y) ‚â§ C)

namespace quasi_mul_add_hom

variables {M : Type*} [monoid M] {V : Type*} [normed_group V]

instance : has_coe_to_fun (quasi_mul_add_hom M V) :=
‚ü®Œª _, M ‚Üí V, quasi_mul_add_hom.to_fun‚ü©

def mk' (f : M ‚Üí V) (C : ‚Ñù) (hC : ‚àÄ x y, dist (f (x * y)) (f x + f y) ‚â§ C) :
  quasi_mul_add_hom M V :=
‚ü®f, C, hC‚ü©

lemma mk_apply (f : M ‚Üí V) (h x) : (quasi_mul_add_hom.mk f h : M ‚Üí V) x = f x := rfl

lemma mk'_apply (f : M ‚Üí V) (C hC x) : (quasi_mul_add_hom.mk' f C hC : M ‚Üí V) x = f x := rfl

lemma coe_inj ‚¶Éf g : quasi_mul_add_hom M V‚¶Ñ (H : (f : M ‚Üí V) = g) : f = g :=
by { cases f, cases g, cases H, refl }

@[ext] lemma ext ‚¶Éf g : quasi_mul_add_hom M V‚¶Ñ (H : ‚àÄ x, f x = g x) : f = g :=
coe_inj (funext H)

variables (f g : quasi_mul_add_hom M V)

lemma cbd_bounded : ‚àÉ C, ‚àÄ x y, dist (f (x * y)) (f x + f y) ‚â§ C := f.cbd_bounded'

def norm_cbd :=
‚®Ü p : M √ó M,  dist (f (p.1 * p.2)) (f p.1 + f p.2)

lemma norm_cbd_bdd_above : bdd_above (range $ Œª p : M √ó M, dist (f (p.1 * p.2)) (f p.1 + f p.2)) :=
f.cbd_bounded.imp $ Œª C hC _ ‚ü®p, hp‚ü©, hp ‚ñ∏ hC p.1 p.2

lemma map_mul_ineq (x y) : dist (f (x * y)) (f x + f y) ‚â§ f.norm_cbd :=
@le_csupr _ _ _ _ f.norm_cbd_bdd_above (x, y)

lemma norm_cbd_le {C} (hC : ‚àÄ x y, dist (f (x * y)) (f x + f y) ‚â§ C) : f.norm_cbd ‚â§ C :=
csupr_le (Œª p, hC p.1 p.2)

lemma norm_cbd_mk'_le (f : M ‚Üí V) (C hC) : (mk' f C hC).norm_cbd ‚â§ C := norm_cbd_le _ hC

lemma norm_cbd_nonneg : 0 ‚â§ f.norm_cbd :=
le_trans dist_nonneg (f.map_mul_ineq 1 1)

def nnnorm_cbd : nnreal := ‚ü®f.norm_cbd, f.norm_cbd_nonneg‚ü©

lemma coe_nnnorm_cbd : (f.nnnorm_cbd : ‚Ñù) = f.norm_cbd := rfl

def comp_hom {N : Type*} [monoid N] (g : N ‚Üí* M) : quasi_mul_add_hom N V :=
mk' (Œª x, f (g x)) f.norm_cbd $ Œª x y, by simpa only [g.map_mul] using f.map_mul_ineq (g x) (g y)

@[simp] lemma comp_hom_apply {N : Type*} [monoid N] (g : N ‚Üí* M) (x) : f.comp_hom g x = f (g x) := rfl

lemma norm_cbd_comp_hom_le {N : Type*} [monoid N] (g : N ‚Üí* M) :
  (f.comp_hom g).norm_cbd ‚â§ f.norm_cbd :=
norm_cbd_mk'_le _ _ _

instance : add_comm_group (quasi_mul_add_hom M V) :=
{ add := Œª f g, mk' (Œª x, f x + g x) (f.norm_cbd + g.norm_cbd) $
    assume x y,
    calc dist (f (x * y) + g (x * y)) ((f x + g x) + (f y + g y)) =
      dist (f (x * y) + g (x * y)) ((f x + f y) + (g x + g y)) : by { congr' 1, ac_refl }
    ... ‚â§  _ : dist_add_add_le_of_le (f.map_mul_ineq x y) (g.map_mul_ineq x y),
  add_assoc := Œª f‚ÇÅ f‚ÇÇ f‚ÇÉ, coe_inj (add_assoc f‚ÇÅ f‚ÇÇ f‚ÇÉ),
  zero := ‚ü®0, 0, Œª _ _, by simp only [pi.zero_apply, zero_add, dist_self]‚ü©,
  zero_add := Œª f, coe_inj (zero_add (f : M ‚Üí V)),
  add_zero := Œª f, coe_inj (add_zero (f : M ‚Üí V)),
  add_comm := Œª f g, coe_inj (add_comm (f : M ‚Üí V) g),
  neg := Œª f, ‚ü®-f, by { simp only [pi.neg_apply, (neg_add _ _).symm, dist_neg_neg], exact f.2 }‚ü©,
  add_left_neg := Œª f, coe_inj (add_left_neg (f : M ‚Üí V)) }

lemma add_apply (x : M) : (f + g) x = f x + g x := rfl
lemma zero_apply (x : M) : (0 : quasi_mul_add_hom M V) x = 0 := rfl
lemma norm_cbd_add_le : (f + g).norm_cbd ‚â§ f.norm_cbd + g.norm_cbd :=
norm_cbd_mk'_le _ _ _

instance : emetric_space (quasi_mul_add_hom M V) :=
{ edist := Œª f g, ‚®Ü x, edist (f x) (g x),
  edist_self := Œª f, by simp only [edist_self, supr_const],
  eq_of_edist_eq_zero := Œª f g h, ext $ Œª x, edist_eq_zero.1 $ le_zero_iff_eq.1 $ h ‚ñ∏ le_supr _ x,
  edist_comm := Œª f g, by simp only [edist_comm],
  edist_triangle := Œª f g h, supr_le $ Œª x, le_trans (edist_triangle _ (g x) _)
    (add_le_add' (le_supr _ x) (le_supr _ x)) }

lemma edist_def : edist f g = ‚®Ü x, edist (f x) (g x) := rfl

variables {f g}
lemma edist_le_iff {C} : edist f g ‚â§ C ‚Üî ‚àÄ x, edist (f x) (g x) ‚â§ C := supr_le_iff
variables (f g)

lemma edist_le_edist (x) : edist (f x) (g x) ‚â§ edist f g :=
le_supr _ x

lemma lipschitz_with_eval (x : M) : lipschitz_with 1 (Œª f : quasi_mul_add_hom M V, f x) :=
lipschitz_with.of_edist_le $ Œª f g, le_supr _ x

open filter
lemma cbd_closed_ball_is_complete [complete_space V] (C : ‚Ñù) :
  is_complete {f : quasi_mul_add_hom M V | f.norm_cbd ‚â§ C} :=
begin
  assume l hl hlC,
  -- As usual, we construct the limit function as the pointwise limit
  rw [le_principal_iff, ‚Üê filter.eventually] at hlC,
  have : ‚àÄ x, ‚àÉ y, tendsto (Œª f : quasi_mul_add_hom M V, f x) l (ùìù y),
    from Œª x, complete_space.complete (cauchy_map (lipschitz_with_eval x).uniform_continuous hl),
  choose g hg,
  -- We prove that the limit function belongs to the set `{f | f.norm_cbd ‚â§ C}`
  have hgC : ‚àÄ x y, dist (g (x * y)) (g x + g y) ‚â§ C,
  { intros x y,
    have : ‚àÄ·∂† (f : quasi_mul_add_hom M V) in l, dist (f (x * y)) (f x + f y) ‚â§ C,
      from hlC.mono (Œª f hf, le_trans (f.map_mul_ineq x y) hf),
    exact le_of_tendsto hl.1 (tendsto_dist (hg (x * y)) ((hg x).add (hg y))) this },
  refine ‚ü®‚ü®g, C, hgC‚ü©, norm_cbd_le _ hgC, _‚ü©,
  -- Now we prove convergence
  refine (nhds_basis_uniformity uniformity_basis_edist_le).ge_iff.2 (Œª Œµ Œµ0, _),
  rcases (uniformity_basis_edist_le.cauchy_iff.1 hl).2 Œµ Œµ0 with ‚ü®s, hsl, hs‚ü©,
  refine mem_sets_of_superset hsl (Œª f hf, edist_le_iff.2 $ Œª x, _),
  change edist (f x) (g x) ‚â§ Œµ,
  refine le_of_tendsto hl.1 (tendsto_edist tendsto_const_nhds (hg x)) (mem_sets_of_superset hsl _),
  exact Œª f' hf', edist_le_iff.1 (hs f f' hf hf') x
end

instance [normed_space ‚Ñù V] : module ‚Ñù (quasi_mul_add_hom M V) :=
{ smul := Œª c f, ‚ü®Œª x, c ‚Ä¢ (f x), ‚à•c‚à• * f.norm_cbd,
  begin
    assume x y,
    rw [‚Üê smul_add, dist_smul],
    exact mul_le_mul_of_nonneg_left (f.map_mul_ineq x y) (norm_nonneg c)
  end‚ü©,
  one_smul := Œª f, ext $ Œª x, one_smul _ (f x),
  mul_smul := Œª c‚ÇÅ c‚ÇÇ f, ext $ Œª x, mul_smul _ _ _,
  smul_add := Œª c f g, ext $ Œª x, smul_add _ _ _,
  smul_zero := Œª c, ext $ Œª x, smul_zero _,
  add_smul := Œª c‚ÇÅ c‚ÇÇ f, ext $ Œª x, add_smul _ _ _,
  zero_smul := Œª f, ext $ Œª x, zero_smul _ _ }

variables [normed_space ‚Ñù V]

lemma smul_def (c : ‚Ñù) (x : M) : (c ‚Ä¢ f) x = c ‚Ä¢ (f x) := rfl

lemma edist_smul (c : ‚Ñù) : edist (c ‚Ä¢ f) (c ‚Ä¢ g) = nnnorm c * edist f g :=
by simp only [edist_def, supr_le_iff, smul_def, ennreal.mul_supr, edist_nndist,
  nndist_smul, ennreal.coe_mul]

lemma smul_lipschitz_with (c : ‚Ñù) :
  lipschitz_with (nnnorm c) (Œª f : quasi_mul_add_hom M V, c ‚Ä¢ f) :=
Œª f g, le_of_eq $ edist_smul f g c

lemma norm_cbd_smul (c : ‚Ñù) (f : quasi_mul_add_hom M V) :
  (c ‚Ä¢ f).norm_cbd = (abs c) * f.norm_cbd :=
by simp only [norm_cbd, real.mul_csupr f.norm_cbd_bdd_above (abs_nonneg c), smul_def,
  (smul_add _ _ _).symm, dist_smul, real.norm_eq_abs]

end quasi_mul_add_hom

def quasi_arith_seq (V : Type*) [normed_group V] :=
quasi_mul_add_hom (multiplicative ‚Ñï) V

namespace quasi_arith_seq

variables {V : Type*} [ngV : normed_group V] [nsV : normed_space ‚Ñù V] [csV : complete_space V]
include ngV

def mk' (f : ‚Ñï ‚Üí V) (C : ‚Ñù) (hC : ‚àÄ k l, dist (f (k + l)) (f k + f l) ‚â§ C) :
  quasi_arith_seq V :=
‚ü®f, C, hC‚ü©

instance : has_coe_to_fun (quasi_arith_seq V) := ‚ü®Œª _, ‚Ñï ‚Üí V, quasi_mul_add_hom.to_fun‚ü©
instance : add_comm_group (quasi_arith_seq V) := quasi_mul_add_hom.add_comm_group
instance : emetric_space (quasi_arith_seq V) := quasi_mul_add_hom.emetric_space
instance [normed_space ‚Ñù V] : module ‚Ñù (quasi_arith_seq V) := quasi_mul_add_hom.module

variables (f g : quasi_arith_seq V)

lemma cbd_bounded : ‚àÉ C, ‚àÄ x y, dist (f (x + y)) (f x + f y) ‚â§ C :=
f.cbd_bounded

export quasi_mul_add_hom (norm_cbd)

lemma map_add_ineq (x y) : dist (f (x + y)) (f x + f y) ‚â§ f.norm_cbd :=
f.map_mul_ineq x y

lemma norm_cbd_le {C} (hC : ‚àÄ k l, dist (f (k + l)) (f k + f l) ‚â§ C) : f.norm_cbd ‚â§ C :=
f.norm_cbd_le hC

lemma norm_cbd_nonneg : 0 ‚â§ f.norm_cbd := f.norm_cbd_nonneg

lemma norm_cbd_mk'_le (f : ‚Ñï ‚Üí V) (C hC) : (mk' f C hC).norm_cbd ‚â§ C := norm_cbd_le _ hC

lemma coe_nnnorm_cbd : (f.nnnorm_cbd : ‚Ñù) = f.norm_cbd := rfl

lemma edist_def : edist f g = ‚®Ü x, edist (f x) (g x) := rfl

lemma edist_le_edist (k) : edist (f k) (g k) ‚â§ edist f g :=
le_supr _ k

lemma lipschitz_with_eval (k : ‚Ñï) : lipschitz_with 1 (Œª f : quasi_arith_seq V, f k) :=
quasi_mul_add_hom.lipschitz_with_eval k

def arg_rescale (n : ‚Ñï) : quasi_arith_seq V :=
mk' (Œª k, f (n * k)) f.norm_cbd $
assume k l : ‚Ñï,
calc dist (f (n * (k + l))) (f (n * k) + f (n * l)) =
  dist (f (n * k + n * l)) (f (n * k) + f (n * l)) : by rw [mul_add]
... ‚â§ _ : f.map_add_ineq (n * k) (n * l)

lemma arg_rescale_def (n k : ‚Ñï) : f.arg_rescale n k = f (n * k) := rfl

lemma arg_rescale_lipschitz (n : ‚Ñï) :
  lipschitz_with 1 (Œª f : quasi_arith_seq V, f.arg_rescale n) :=
begin
  refine lipschitz_with.of_edist_le (Œª f g, _),
  simp only [edist_def],
  exact supr_le_supr2 (Œª k : ‚Ñï, ‚ü®n * k, le_refl _‚ü©)
end

lemma norm_cbd_arg_rescale_le (n : ‚Ñï) :
  (f.arg_rescale n).norm_cbd ‚â§ f.norm_cbd :=
norm_cbd_mk'_le _ _ _

lemma cbd_closed_ball_is_complete [complete_space V] (C : ‚Ñù) :
  is_complete {f : quasi_arith_seq V | f.norm_cbd ‚â§ C} :=
quasi_mul_add_hom.cbd_closed_ball_is_complete C

include nsV

lemma smul_def (c : ‚Ñù) (n : ‚Ñï) : (c ‚Ä¢ f) n = c ‚Ä¢ (f n) := rfl

lemma edist_smul (c : ‚Ñù) : edist (c ‚Ä¢ f) (c ‚Ä¢ g) = nnnorm c * edist f g :=
quasi_mul_add_hom.edist_smul f g c

lemma norm_cbd_smul (c : ‚Ñù) (f : quasi_arith_seq V) :
  (c ‚Ä¢ f).norm_cbd = (abs c) * f.norm_cbd :=
f.norm_cbd_smul c

lemma smul_lipschitz_with (c : ‚Ñù) :
  lipschitz_with (nnnorm c) (Œª f : quasi_arith_seq V, c ‚Ä¢ f) :=
quasi_mul_add_hom.smul_lipschitz_with c

def zoom2 : quasi_arith_seq V := (2‚Åª¬π:‚Ñù) ‚Ä¢ (f.arg_rescale 2)

lemma zoom2_contracting : contracting_with 2‚Åª¬π (@zoom2 V ngV _) :=
begin
  use nnreal.two_inv_lt_one,
  convert (smul_lipschitz_with _).comp (arg_rescale_lipschitz 2),
  apply nnreal.eq,
  rw [mul_one, coe_nnnorm, real.norm_eq_abs, abs_of_pos (inv_pos.2 $ @two_pos ‚Ñù _)],
  refl
end

lemma edist_zoom2_le : edist f f.zoom2 ‚â§ 2‚Åª¬π * f.nnnorm_cbd :=
begin
  rw [edist_def, supr_le_iff],
  intro k,
  rw [zoom2, smul_def, arg_rescale_def, edist_nndist, ‚Üê ennreal.coe_inv_two, ‚Üê ennreal.coe_mul,
    ennreal.coe_le_coe, ‚Üê nnreal.coe_le_coe, nnreal.coe_mul, ‚Üê dist_nndist, coe_nnnorm_cbd],
  conv { congr, congr,
    rw [‚Üê one_smul ‚Ñù (f k), ‚Üê mul_inv_cancel (@two_ne_zero ‚Ñù _), two_mul, add_smul, ‚Üê smul_add] },
  rw [two_mul, dist_smul, real.norm_eq_abs, abs_of_pos (inv_pos.2 $ @two_pos ‚Ñù _), dist_comm],
  exact mul_le_mul_of_nonneg_left (f.map_add_ineq _ _) (inv_nonneg.2 $ le_of_lt two_pos)
end

lemma norm_cbd_zoom2_le : f.zoom2.norm_cbd ‚â§ 2‚Åª¬π * f.norm_cbd :=
begin
  rw [zoom2, norm_cbd_smul, ‚Üê abs_of_pos (inv_pos.2 $ @two_pos ‚Ñù _), abs_abs],
  exact mul_le_mul_of_nonneg_left (f.norm_cbd_arg_rescale_le _) (abs_nonneg _)
end

lemma norm_cbd_zoom2_le' : f.zoom2.norm_cbd ‚â§ f.norm_cbd :=
le_trans f.norm_cbd_zoom2_le $
begin
  conv_rhs { rw [‚Üê one_mul f.norm_cbd] },
  rw [‚Üê one_div_eq_inv],
  exact mul_le_mul_of_nonneg_right (le_of_lt one_half_lt_one) f.norm_cbd_nonneg
end

lemma zoom2_app (k) : f.zoom2 k = (2‚Åª¬π:‚Ñù) ‚Ä¢ f (2 * k) := rfl

lemma iter_zoom2_app_one :
  ‚àÄ n (f : quasi_arith_seq V), (zoom2^[n] f 1) = (2‚Åª¬π:‚Ñù)^n ‚Ä¢ (f $ 2^n)
| 0 f := (one_smul _ _).symm
| (n+1) f := by rw [nat.iterate_succ, iter_zoom2_app_one n, f.zoom2_app, smul_smul, pow_succ',
  nat.pow_succ, mul_comm 2]

include csV

def slope (f : quasi_arith_seq V) : V :=
begin
  have : maps_to zoom2 {g : quasi_arith_seq V | norm_cbd g ‚â§ f.norm_cbd}
    {g | norm_cbd g ‚â§ f.norm_cbd},
  { intros g hg,
    exact le_trans g.norm_cbd_zoom2_le' hg },
  refine (zoom2_contracting.restrict this).efixed_point' _ (cbd_closed_ball_is_complete _)
    this f (le_refl $ norm_cbd f) (lt_of_le_of_lt f.edist_zoom2_le _) 1,
  exact ennreal.mul_lt_top (ennreal.lt_top_iff_ne_top.2 (ennreal.inv_ne_top.2 ennreal.two_ne_zero))
    ennreal.coe_lt_top
end

lemma slope_eq_of_edist_lt_top (h : edist f g < ‚ä§) :
  f.slope = g.slope :=
begin
  rw [slope, slope],
  refine congr_fun (congr_arg _ _) 1,
  apply contracting_with.efixed_point_eq_of_edist_lt_top',
  exacts [zoom2_contracting, h]
end

lemma slope_eq_of_dist_le (C : ‚Ñù) (h : ‚àÄ k, dist (f k) (g k) ‚â§ C) :
  f.slope = g.slope :=
begin
  apply slope_eq_of_edist_lt_top,
  refine lt_of_le_of_lt _ (ennreal.coe_lt_top : ‚Üë(nnreal.of_real C) < ‚ä§),
  simp only [edist_def, supr_le_iff, edist_nndist, ennreal.coe_le_coe,
    ‚Üê nnreal.coe_le_coe, ‚Üê dist_nndist],
  intro n,
  exact le_trans (h n) (nnreal.le_coe_of_real C)
end

lemma dist_slope_le_aux (n : ‚Ñï) :
  dist ((2‚Åª¬π:‚Ñù)^n ‚Ä¢ (f $ 2^n)) f.slope ‚â§ f.norm_cbd * (2‚Åª¬π:‚Ñù)^n :=
begin
  rw [dist_nndist, ‚Üê coe_nnnorm_cbd, ‚Üê iter_zoom2_app_one, ‚Üê nnreal.coe_one],
  norm_cast,
  rw [‚Üê ennreal.coe_le_coe, ‚Üê edist_nndist],
  apply le_trans (edist_le_edist _ _ 1),
  apply le_trans (contracting_with.apriori_edist_iterate_efixed_point_le' _ _ _ _ _ _),
  convert (ennreal.mul_right_mono (ennreal.mul_right_mono $ edist_zoom2_le _)),
  simp only [],
  rw [ennreal.coe_mul, ennreal.coe_pow, ennreal.coe_inv_two, ennreal.one_sub_inv_two,
    ennreal.inv_inv],
  conv_rhs { rw [mul_comm, ‚Üê mul_assoc, ‚Üê mul_assoc,
    ennreal.mul_inv_cancel ennreal.two_ne_zero ennreal.coe_ne_top, one_mul] }
end

lemma dist_slope_le : dist (f 1) f.slope ‚â§ f.norm_cbd :=
by simpa only [nat.pow_zero, pow_zero, nat.iterate_zero, one_smul, mul_one]
  using f.dist_slope_le_aux 0

lemma tendsto_slope_aux :
  tendsto (Œª n:‚Ñï, (2‚Åª¬π:‚Ñù)^n ‚Ä¢ (f $ 2^n)) at_top (ùìù f.slope) :=
begin
  simp only [(iter_zoom2_app_one _ _).symm],
  apply ((lipschitz_with_eval 1).continuous.tendsto _).comp,
  apply contracting_with.tendsto_iterate_efixed_point'
end

lemma slope_add : (f + g).slope = f.slope + g.slope :=
begin
  refine tendsto_nhds_unique at_top_ne_bot (f + g).tendsto_slope_aux _,
  convert f.tendsto_slope_aux.add g.tendsto_slope_aux,
  ext n,
  apply smul_add
end

end quasi_arith_seq

namespace quasi_mul_add_hom

variables {M : Type*} [monoid M] {V : Type*} [normed_group V]
  [nsV : normed_space ‚Ñù V] [csV : complete_space V] (f : quasi_mul_add_hom M V)

def on_powers (x : M) : quasi_arith_seq V :=
{ to_fun := Œª n:‚Ñï, f (x ^ n),
  cbd_bounded' := ‚ü®f.norm_cbd, Œª k l, by { erw [pow_add], apply f.map_mul_ineq }‚ü©}

lemma on_powers_def (x : M) (n : ‚Ñï) : f.on_powers x n = f (x ^ n) := rfl

lemma on_powers_norm_cbd_le (x) : (f.on_powers x).norm_cbd ‚â§ f.norm_cbd :=
(f.on_powers x).norm_cbd_le $ Œª k l, by { rw [on_powers_def, pow_add], apply f.map_mul_ineq }

include nsV csV

def approx (x : M) : V := (f.on_powers x).slope

lemma approx_mul_of_commute {x y : M} (h : commute x y) :
  f.approx (x * y) = f.approx x + f.approx y :=
begin
  delta approx,
  rw [‚Üê quasi_arith_seq.slope_add],
  apply quasi_arith_seq.slope_eq_of_dist_le _ _ f.norm_cbd,
  intro n,
  convert f.map_mul_ineq (x^n) (y^n),
  exact congr_arg f (h.mul_pow n)
end

lemma approx_one : f.approx 1 = 0 :=
add_self_iff_eq_zero.1 $
by rw [‚Üê f.approx_mul_of_commute (commute.one_left 1), one_mul]

lemma approx_pow (x : M) : ‚àÄ n : ‚Ñï, f.approx (x^n) = (n:‚Ñù) ‚Ä¢ f.approx x
| 0 := by simp only [nat.cast_zero, zero_smul, pow_zero, approx_one]
| (n+1) := by simp only [nat.cast_succ, pow_succ, add_smul, one_smul,
  f.approx_mul_of_commute (commute.self_pow x n), approx_pow n, add_comm]

lemma approx_units_inv (x : units M) : f.approx (x‚Åª¬π : units M) = - f.approx x :=
eq_neg_iff_add_eq_zero.2 $ by simpa only [x.inv_mul, f.approx_one]
  using (f.approx_mul_of_commute (commute.refl x).units_coe.units_inv_left).symm

lemma dist_le_of_semiconj {a x y : M} (h : semiconj_by a x y) :
  dist (f x) (f y) ‚â§ 2 * f.norm_cbd :=
begin
  rw [two_mul, ‚Üê dist_add_left (f a)],
  refine le_trans (dist_triangle _ (f (a * x)) _)
    (add_le_add _ _),
  { rw [dist_comm], apply f.map_mul_ineq },
  { rw [h.eq, add_comm], apply f.map_mul_ineq }
end

lemma approx_eq_of_semiconj {a x y : M} (h : semiconj_by a x y) :
  f.approx x = f.approx y :=
begin
  refine quasi_arith_seq.slope_eq_of_dist_le _ _ (2 * f.norm_cbd) (Œª n, _),
  exact f.dist_le_of_semiconj (h.pow_right n)
end

lemma dist_approx_le (x : M) : dist (f x) (f.approx x) ‚â§ f.norm_cbd :=
by simpa only [on_powers_def, pow_one]
  using le_trans (f.on_powers x).dist_slope_le (f.on_powers_norm_cbd_le x)

lemma dist_frac_pow_approx_le (x : M) (n : ‚Ñï) (hn : 0 < n):
  dist ((n:‚Ñù)‚Åª¬π ‚Ä¢ f (x^n)) (f.approx x) ‚â§ f.norm_cbd / n :=
begin
  have A : 0 < (n:‚Ñù), from nat.cast_pos.2 hn,
  have := f.dist_approx_le (x^n),
  rwa [approx_pow, ‚Üê one_smul ‚Ñù (f (x^n)), ‚Üê mul_inv_cancel (ne_of_gt A), mul_smul,
    dist_smul, real.norm_eq_abs, abs_of_pos A, ‚Üê le_div_iff' A] at this
end

lemma tendsto_approx (x : M) :
  tendsto (Œª n:‚Ñï, (n:‚Ñù)‚Åª¬π ‚Ä¢ f (x^n)) at_top (ùìù $ f.approx x) :=
begin
  refine tendsto_iff_dist_tendsto_zero.2 _,
  refine tendsto_of_tendsto_of_tendsto_of_le_of_le'
    tendsto_const_nhds (tendsto_const_div_at_top_nhds_0_nat f.norm_cbd) _ _,
  exact univ_mem_sets' (Œª _, dist_nonneg),
  apply eventually.mono (mem_at_top 1),
  assume n hn,
  exact f.dist_frac_pow_approx_le _ _ (nat.lt_of_succ_le hn)
end

lemma approx_eq_of_dist_le {f g : quasi_mul_add_hom M V} {C : ‚Ñù}
  (h : ‚àÄ x, dist (f x) (g x) ‚â§ C) (x) :
  f.approx x = g.approx x :=
quasi_arith_seq.slope_eq_of_dist_le _ _ C (Œª k, h (x^k))

end quasi_mul_add_hom
