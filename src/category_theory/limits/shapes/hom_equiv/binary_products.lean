/-
Copyright (c) 2019 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import category_theory.limits.shapes.binary_products

/-!
Constructing binary products from specified objects, and characterisations of the morphisms
out them.
-/

universes v u

open category_theory
open opposite

namespace category_theory.limits

variables {C : Type u} [ùíû : category.{v+1} C]
include ùíû

open walking_pair

section
local attribute [tidy] tactic.case_bash

/--
We characterise `F.cones` objectwise for a functor `F` on the walking pair. -/
def walking_pair_cones_equiv {Q : C} (F : discrete walking_pair.{v} ‚•§ C) : (Q ‚ü∂ F.obj left) √ó (Q ‚ü∂ F.obj right) ‚âÉ F.cones.obj (op Q) :=
iso.to_equiv
{ hom := Œª f, { app := Œª j, match j with | left := f.1 | right := f.2 end },
  inv := Œª c, (c.app left, c.app right) }

def binary_product_nat_iso_of_hom_equiv
  {P : C} (F : discrete walking_pair.{v} ‚•§ C)
  (h : Œ† (Q : C), (Q ‚ü∂ P) ‚âÉ (Q ‚ü∂ F.obj left) √ó (Q ‚ü∂ F.obj right))
  (n‚ÇÅ : Œ† (Q Q' : C) (f : Q ‚ü∂ Q') (g : Q' ‚ü∂ P), (h Q (f ‚â´ g)).1 = f ‚â´ (h Q' g).1)
  (n‚ÇÇ : Œ† (Q Q' : C) (f : Q ‚ü∂ Q') (g : Q' ‚ü∂ P), (h Q (f ‚â´ g)).2 = f ‚â´ (h Q' g).2) :
    yoneda.obj P ‚âÖ F.cones :=
nat_iso.of_components (Œª Q, ((h (unop Q)).trans (walking_pair_cones_equiv F)).to_iso) (by tidy)
end

/--
Show that `C` has binary products by providing a function `prod : C ‚Üí C ‚Üí C`, and for all `X Y : C`,
and all other objects `Q : C`, providing an equivalence `(Q ‚ü∂ prod X Y) ‚âÉ (Q ‚ü∂ X) √ó (Q ‚ü∂ Y)` which
is natural in `Q`.
-/
def has_binary_products_of_hom_equiv
  (prod : C ‚Üí C ‚Üí C)
  (hom_equiv : Œ† (X Y Q : C), (Q ‚ü∂ prod X Y) ‚âÉ (Q ‚ü∂ X) √ó (Q ‚ü∂ Y))
  (naturality‚ÇÅ : Œ† (X Y Q Q' : C) (f : Q ‚ü∂ Q') (g : Q' ‚ü∂ prod X Y),
    (hom_equiv X Y Q (f ‚â´ g)).1 = f ‚â´ (hom_equiv X Y Q' g).1)
  (naturality‚ÇÇ : Œ† (X Y Q Q' : C) (f : Q ‚ü∂ Q') (g : Q' ‚ü∂ prod X Y),
    (hom_equiv X Y Q (f ‚â´ g)).2 = f ‚â´ (hom_equiv X Y Q' g).2) :
  has_binary_products.{v} C :=
{ has_limits_of_shape :=
  has_limits_of_shape.of_nat_iso (Œª F,
    ‚ü®_, binary_product_nat_iso_of_hom_equiv F
          (hom_equiv (F.obj left) (F.obj right))
          (naturality‚ÇÅ (F.obj left) (F.obj right))
          (naturality‚ÇÇ (F.obj left) (F.obj right))‚ü©) }

example : has_binary_products.{v} (Type v) :=
has_binary_products_of_hom_equiv
  (Œª X Y, X √ó Y)
  (Œª X Y Q, iso.to_equiv
    { hom := Œª f, (Œª q, (f q).1, Œª q, (f q).2),
      inv := Œª p q, (p.1 q, p.2 q) })
  (by tidy) (by tidy)

end category_theory.limits
