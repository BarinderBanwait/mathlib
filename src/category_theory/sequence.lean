import algebra.group group_theory.subgroup
import category_theory.instances.groups
import category_theory.functor_category
import data.set.function

universes v v‚ÇÅ v‚ÇÇ v‚ÇÉ u u‚ÇÅ u‚ÇÇ u‚ÇÉ -- declare the `v`'s first; see `category_theory.category` for an explanation

def translate (n : ‚Ñ§) : ‚Ñ§ ‚•§ ‚Ñ§ :=
{ obj := Œª i, i + n,
  map := by tidy }

namespace category_theory
open set instances
variables (C : Type u‚ÇÅ) [ùíû : category.{v‚ÇÅ} C]
include ùíû

def sequence := ‚Ñ§ ‚•§ C

namespace sequence

instance : category (sequence C) := functor.category _ _

variables {C} (X : sequence C)

def delta (i : ‚Ñ§) {i' : ‚Ñ§} (h : i = i' . obviously) :
  X.obj i' ‚ü∂ X.obj (i'+1) :=
X.map $ by tidy

section
variables (obj : ‚Ñ§ ‚Üí C) (map : Œ† i, obj i ‚ü∂ obj (i+1))
include obj map

def comp_of_delta {i : ‚Ñ§} : Œ† (k : ‚Ñï), obj i ‚ü∂ obj (i + k) :=
nat.rec _ _
-- | 0     := by convert ùüô _; simp
-- | (n+1) := _

def mk_of_delta : sequence C :=
{ obj := obj,
  map := _,
  map_id' := _,
  map_comp' := _ }

end

def shift (n : ‚Ñ§) : sequence C ‚•§ sequence C :=
{ obj := Œª X, (translate n) ‚ãô X,
  map := Œª X Y f, whisker_left _ f }

omit ùíû
variable (A : sequence AddCommGroup)

#print delta

def is_complex :=
‚àÄ (i : ‚Ñ§), range (@delta _ _ A (i-1) _ begin exact rfl, end) ‚äÜ
  ker (@delta _ _ A i (i-1+1) begin by tidy end)

def is_bounded_below_by (n : ‚Ñ§) :=
‚àÄ i < n, A.obj i ‚âÖ 0

end sequence

end category_theory



local attribute [instance] classical.prop_decidable



namespace group

structure sequence :=
(obj : ‚Ñ§ ‚Üí Type u)
(grp : Œ† i, group $ obj i)
(map : Œ† i, obj i ‚Üí obj (i+1))
(hom : Œ† i, is_group_hom $ map i)

namespace sequence
open set is_group_hom

variable (A : sequence)

instance (i : ‚Ñ§) : group $ A.obj i := A.grp i

instance (i : ‚Ñ§) : is_group_hom $ A.map i := A.hom i

def is_complex : Prop :=
‚àÄ i, A.map _ ‚àò A.map (i-1) = Œª a, 1

def is_bounded_below : Prop :=
‚àÉ n, ‚àÄ i ‚â§ n, subsingleton $ A.obj i

def is_bounded_above : Prop :=
‚àÉ n, ‚àÄ i ‚â• n, subsingleton $ A.obj i

def is_exact_at (i : ‚Ñ§) : Prop :=
range (A.map (i-1)) = ker (A.map _)

def is_exact : Prop :=
‚àÄ i, A.is_exact_at i

lemma is_complex_of_is_exact (h : A.is_exact) :
A.is_complex :=
begin
  intro i,
  funext a,
  delta function.comp,
  rw ‚Üê mem_ker _,
  have := h i,
  delta is_exact_at at this,
  rw ‚Üê this,
  exact mem_range_self _,
end

def is_short_exact : Prop :=
‚àÉ n,
  (‚àÄ i < (n-1), subsingleton $ A.obj i) ‚àß
  (‚àÄ i > (n+1), subsingleton $ A.obj i) ‚àß
  A.is_exact_at (n-1) ‚àß
  A.is_exact_at n ‚àß
  A.is_exact_at (n+1)

def is_left_exact : Prop :=
‚àÉ n,
  (‚àÄ i < (n-1), subsingleton $ A.obj i) ‚àß
  (‚àÄ i > (n+1), subsingleton $ A.obj i) ‚àß
  A.is_exact_at (n-1) ‚àß
  A.is_exact_at n

def is_right_exact : Prop :=
‚àÉ n,
  (‚àÄ i < (n-1), subsingleton $ A.obj i) ‚àß
  (‚àÄ i > (n+1), subsingleton $ A.obj i) ‚àß
  A.is_exact_at n ‚àß
  A.is_exact_at (n+1)

lemma is_exact_at_of_subsingleton (i : ‚Ñ§) [h : subsingleton (A.obj i)] :
  A.is_exact_at i :=
begin
  have : (i : ‚Ñ§) = i - 1 + 1, by simp,
  rw this at h,
  ext a,
  replace : a = 1,
    resetI,
    apply subsingleton.elim,
  rw this,
  split; intro H;
  apply is_submonoid.one_mem,
end

lemma is_short_exact_iff :
  A.is_short_exact ‚Üî A.is_left_exact ‚àß A.is_right_exact :=
begin
  split; intro h,
  { rcases h with ‚ü®n,below,above,left,middle,right‚ü©,
    repeat {split}, assumption' },
  { rcases h with ‚ü®‚ü®n‚ÇÅ,below‚ÇÅ,above‚ÇÅ,left‚ÇÅ,middle‚ÇÅ‚ü©,
                   ‚ü®n‚ÇÇ,below‚ÇÇ,above‚ÇÇ,middle‚ÇÇ,right‚ÇÇ‚ü©‚ü©,
    refine ‚ü®n‚ÇÅ,below‚ÇÅ,above‚ÇÅ,left‚ÇÅ,middle‚ÇÅ,_‚ü©,
    by_contradiction,
    have claim‚ÇÅ : ¬¨ subsingleton (A.obj $ n‚ÇÅ + 1),
      intro, resetI, apply a,
      apply is_exact_at_of_subsingleton,
    have claim‚ÇÇ : ¬¨ n‚ÇÅ + 1 > n‚ÇÇ + 1,
      intro, apply claim‚ÇÅ, apply above‚ÇÇ, assumption,
    simp at *,
  }
end




end sequence

end group
