import category_theory.isomorphism

universes v‚ÇÅ u‚ÇÅ

open category_theory

variables {C : Sort u‚ÇÅ} [ùíû : category.{v‚ÇÅ} C]
include ùíû

class canonically_isomorphic (X Y : C) :=
(iso : X ‚âÖ Y)

namespace canonically_isomorphic

instance refl (X : C) : canonically_isomorphic.{v‚ÇÅ} X X :=
{ iso := iso.refl.{v‚ÇÅ} X }

def equal_up_to_canonical_isomorphism {X Y X' Y' : C}
  [canonically_isomorphic.{v‚ÇÅ} X X'] [canonically_isomorphic.{v‚ÇÅ} Y Y'] (f : X ‚ü∂ Y) (g : X' ‚ü∂ Y') :=
f ‚â´ (canonically_isomorphic.iso.{v‚ÇÅ} Y Y').hom = (canonically_isomorphic.iso.{v‚ÇÅ} X X').hom ‚â´ g

infixr ` =‚âÖ `:70 := equal_up_to_canonical_isomorphism

def compose_up_to_canonical_isomorphism {X Y Y' Z : C} [canonically_isomorphic.{v‚ÇÅ} Y Y']
  (f : X ‚ü∂ Y) (g : Y' ‚ü∂ Z) : X ‚ü∂ Z :=
f ‚â´ (canonically_isomorphic.iso.{v‚ÇÅ} Y Y').hom ‚â´ g

infixr ` ‚â´‚âÖ `:70 := compose_up_to_canonical_isomorphism

end canonically_isomorphic
