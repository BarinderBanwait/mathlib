import category_theory.groupoid
import category_theory.eq_to_hom

universes v‚ÇÅ u‚ÇÅ

open category_theory

variables {C : Sort u‚ÇÅ} [ùíû : category.{v‚ÇÅ} C]
include ùíû
variables {J : Sort u‚ÇÅ} [ùí• : groupoid.{v‚ÇÅ} J] [‚àÄ X Y : J, subsingleton (X ‚ü∂ Y)]
include ùí•

class canonically_isomorphic (F : J ‚•§ C) (X‚ÇÅ X‚ÇÇ : C) :=
(j‚ÇÅ j‚ÇÇ : J)
(f : j‚ÇÅ ‚ü∂ j‚ÇÇ)
(h‚ÇÅ : F.obj j‚ÇÅ = X‚ÇÅ . obviously)
(h‚ÇÇ : F.obj j‚ÇÇ = X‚ÇÇ . obviously)

namespace canonically_isomorphic

variables (F : J ‚•§ C)

def iso (X Y : C) [i : canonically_isomorphic F X Y] : X ‚âÖ Y :=
eq_to_iso (canonically_isomorphic.h‚ÇÅ F X Y).symm
  ‚â™‚â´ F.map_iso (as_iso (canonically_isomorphic.f F X Y))
  ‚â™‚â´ eq_to_iso (canonically_isomorphic.h‚ÇÇ F X Y)

-- err... assume F is surjective on objects?
instance refl (j : J) : canonically_isomorphic F (F.obj j) (F.obj j) :=
{ j‚ÇÅ := j,
  j‚ÇÇ := j,
  f := ùüô _, }

instance symm (X Y : C) [i : canonically_isomorphic F X Y] : canonically_isomorphic F Y X :=
{ j‚ÇÅ := i.j‚ÇÇ,
  j‚ÇÇ := i.j‚ÇÅ,
  f := inv i.f,
  h‚ÇÅ := i.h‚ÇÇ,
  h‚ÇÇ := i.h‚ÇÅ }

def equal_up_to_canonical_isomorphism {X Y X' Y' : C}
  [canonically_isomorphic.{v‚ÇÅ} F X X'] [canonically_isomorphic.{v‚ÇÅ} F Y Y'] (f : X ‚ü∂ Y) (g : X' ‚ü∂ Y') :=
f ‚â´ (canonically_isomorphic.iso.{v‚ÇÅ} F Y Y').hom = (canonically_isomorphic.iso.{v‚ÇÅ} F X X').hom ‚â´ g

infixr ` =‚âÖ `:70 := equal_up_to_canonical_isomorphism

def compose_up_to_canonical_isomorphism {X Y Y' Z : C} [canonically_isomorphic.{v‚ÇÅ} F Y Y']
  (f : X ‚ü∂ Y) (g : Y' ‚ü∂ Z) : X ‚ü∂ Z :=
f ‚â´ (canonically_isomorphic.iso.{v‚ÇÅ} F Y Y').hom ‚â´ g

infixr ` ‚â´‚âÖ `:70 := compose_up_to_canonical_isomorphism

end canonically_isomorphic
