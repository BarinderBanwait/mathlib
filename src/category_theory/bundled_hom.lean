/-
Copyright (c) 2019 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import category_theory.bundled
import category_theory.types

/-!
# Category instances for algebraic structures that use bundled homs.

Many algebraic structures in Lean initially used unbundled homs (e.g. a bare function between types, along with
an a `is_monoid_hom` typeclass), but the general trend is towards using bundled homs.

While the helper functions in `category_theory/concrete_category.lean` are useful for categories
with unbundled homs, this file provides similar infrastructure for categories with bundled homs.
-/

universes w v u

namespace category_theory

variables (c : Type u ‚Üí Type v)

-- TODO the square brackets here are useless, remove them and the resulting @s?
structure bundled_hom :=
(hom : Œ† {Œ± Œ≤ : Type u} (IŒ± : c Œ±) (IŒ≤ : c Œ≤), Type w)
(to_fun : Œ† {Œ± Œ≤ : Type u} (IŒ± : c Œ±) (IŒ≤ : c Œ≤), hom IŒ± IŒ≤ ‚Üí Œ± ‚Üí Œ≤)
(id : Œ† {Œ± : Type u} (I : c Œ±), hom I I)
(comp : Œ† {Œ± Œ≤ Œ≥ : Type u} (IŒ± : c Œ±) (IŒ≤ : c Œ≤) (IŒ≥ : c Œ≥),
  hom IŒ± IŒ≤ ‚Üí hom IŒ≤ IŒ≥ ‚Üí hom IŒ± IŒ≥)
(hom_ext : Œ† {Œ± Œ≤ : Type u} (IŒ± : c Œ±) (IŒ≤ : c Œ≤) {f g : hom IŒ± IŒ≤}
  (h : to_fun IŒ± IŒ≤ f = to_fun IŒ± IŒ≤ g), f = g . obviously)
(id_to_fun : Œ† {Œ± : Type u} (I : c Œ±), to_fun I I (id I) = _root_.id . obviously)
(comp_to_fun : Œ† {Œ± Œ≤ Œ≥ : Type u} (IŒ± : c Œ±) (IŒ≤ : c Œ≤) (IŒ≥ : c Œ≥)
  (f : hom IŒ± IŒ≤) (g : hom IŒ≤ IŒ≥),
  to_fun IŒ± IŒ≥ (comp IŒ± IŒ≤ IŒ≥ f g) = (to_fun IŒ≤ IŒ≥ g) ‚àò (to_fun IŒ± IŒ≤ f) . obviously)

attribute [class] bundled_hom

attribute [extensionality] bundled_hom.hom_ext
attribute [simp] bundled_hom.id_to_fun bundled_hom.comp_to_fun

namespace bundled_hom

section
variable [S : bundled_hom c]
include S

instance : category (bundled c) :=
{ hom := Œª X Y, @bundled_hom.hom c S X.Œ± Y.Œ± X.str Y.str,
  id := Œª X, @bundled_hom.id c S X.Œ± X.str,
  comp := Œª X Y Z f g, @bundled_hom.comp c S X.Œ± Y.Œ± Z.Œ± X.str Y.str Z.str f g }

def has_coe_to_fun {X Y : bundled c} : has_coe_to_fun (X ‚ü∂ Y) :=
{ F   := Œª f, X ‚Üí Y,
  coe := Œª f, S.to_fun X.str Y.str f }

local attribute [instance] has_coe_to_fun

@[simp] lemma coe_id {X : bundled c} : ((ùüô X) : X ‚Üí X) = _root_.id :=
S.id_to_fun X.str
@[simp] lemma coe_comp {X Y Z : bundled c} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (x : X) :
  (f ‚â´ g) x = g (f x) :=
begin
  unfold_coes,
  erw S.comp_to_fun
end
end

variables {c}

def forget [S : bundled_hom c] : bundled c ‚•§ Type u :=
{ obj := Œª X, X.Œ±,
  map := Œª X Y f, @bundled_hom.to_fun c S X.Œ± Y.Œ± X.str Y.str f }

instance [S : bundled_hom c] : faithful (@forget c _) := {}

variables (c) (d : Type u ‚Üí Type v)

meta def trivial_forget_obj : tactic unit := `[exact (Œª Œ± s, by resetI; apply_instance)]
meta def trivial_forget_hom : tactic unit := `[exact (Œª X Y f, f)]

-- This has pretty disgusting arguments, but it should only be used in simple cases where
-- everything can be provided by `auto_param`.
-- Example usage is:
-- `def forget_to_Mon : CommMon ‚•§ Mon := bundled_hom.forget_to comm_monoid monoid`

/--
Construct a forgetful functor `bundled c ‚•§ bundled d`, where the category instances were provided
via `bundled_hom`. There are arguments providing evidence that there really is a forgetful functor,
but can often be omitted, and provided via `auto_param` tactics.
-/
def forget_to [Sc : bundled_hom c] [Sd : bundled_hom d]
   (forget_obj : Œ† Œ±, c Œ± ‚Üí d Œ± . trivial_forget_obj)
   (forget_hom : Œ† (X Y : bundled c), @bundled_hom.hom c Sc X.Œ± Y.Œ± X.str Y.str ‚Üí @bundled_hom.hom d Sd X.Œ± Y.Œ± (forget_obj X.Œ± X.str) (forget_obj Y.Œ± Y.str) . trivial_forget_hom)
   (map_id : Œ† X : bundled c, forget_hom X X (ùüô X) = @bundled_hom.id d Sd X.Œ± (forget_obj X.Œ± X.str) . obviously)
   (map_comp : Œ† (X Y Z : bundled c) (f : @bundled_hom.hom c Sc X.Œ± Y.Œ± X.str Y.str) (g : @bundled_hom.hom c Sc Y.Œ± Z.Œ± Y.str Z.str), forget_hom X Z (@bundled_hom.comp c Sc X.Œ± Y.Œ± Z.Œ± X.str Y.str Z.str f g) = @bundled_hom.comp d Sd X.Œ± Y.Œ± Z.Œ± (forget_obj X.Œ± X.str) (forget_obj Y.Œ± Y.str) (forget_obj Z.Œ± Z.str) (forget_hom X Y f) (forget_hom Y Z g) . obviously)
   : bundled c ‚•§ bundled d :=
{ obj := Œª X, ‚ü®X.Œ±, forget_obj X.Œ± X.str‚ü©,
  map := Œª X Y f, forget_hom X Y f }

end bundled_hom

end category_theory
