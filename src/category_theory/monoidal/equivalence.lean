import category_theory.monoidal.natural_transformation
import category_theory.equivalence

open category_theory

universes v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ

open category_theory.equivalence
open category_theory.monoidal_category

namespace category_theory

variables {C : Type u‚ÇÅ} [ùíû : monoidal_category.{v‚ÇÅ} C]
          {D : Type u‚ÇÇ} [ùíü : monoidal_category.{v‚ÇÇ} D]
variables (F : monoidal_functor.{v‚ÇÅ v‚ÇÇ} C D)

local notation `ùüô_` := tensor_unit
local notation `Œ±_` := associator
local notation `Œª_` := left_unitor
local notation `œÅ_` := right_unitor

-- TODO oof, this looks really bad, I want rewrite_search!
def monoidal_inverse [is_equivalence F.to_functor] : monoidal_functor.{v‚ÇÇ v‚ÇÅ} D C :=
{ Œµ :=
  begin
    dsimp,
    refine (is_equivalence.unit_iso F.to_functor).hom.app (ùüô_ C) ‚â´ _,
    dsimp,
    apply F.to_functor.inv.map,
    exact (inv F.Œµ)
  end,
  Œµ_is_iso := by { dsimp, apply_instance, }, -- TODO tidy should do this; defer ext
  Œº := Œª X Y,
  begin
    dsimp,
    refine (is_equivalence.unit_iso F.to_functor).hom.app _ ‚â´ _,
    dsimp,
    apply F.to_functor.inv.map,
    refine (inv (F.Œº _ _) ‚â´ _),
    refine (is_equivalence.counit_iso _).hom.app _ ‚äó (is_equivalence.counit_iso _).hom.app _,
  end,
  Œº_is_iso := Œª X Y, by { dsimp, apply is_iso.comp_is_iso, }, -- why can't apply_instance solve this?
  Œº_natural' := Œª X Y X' Y' f g, begin dsimp, sorry, end,
  associativity' := sorry,
  left_unitality' := sorry,
  right_unitality' := sorry,
  ..(F.to_functor.inv) }

end category_theory
