-- Copyright (c) 2018 Johan Commelin. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Johan Commelin, Reid Barton

import category_theory.yoneda
import category_theory.limits.functor_category
import category_theory.limits.types
import category_theory.adjunction
import category_theory.comma
import category_theory.punit

namespace category_theory
open category_theory.limits

universes v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ -- declare the `v`'s first; see `category_theory.category` for an explanation

-- TODO: How much of this should be generalized to a possibly large category?
variables (C : Type u‚ÇÅ) [ùíû : category.{v‚ÇÅ} C]
include ùíû

def presheaf := C·µí·µñ ‚•§ Type v‚ÇÅ
variables {C}

namespace presheaf

section simp
variable (X : presheaf C)

-- @[simp] lemma map_id {c : C} : X.map (ùüô c) = ùüô (X.obj c) := X.map_id c

-- @[simp] lemma map_id' {c : C} :
-- X.map (@category.id C _ c) = ùüô (X.obj c) := functor.map_id X c

-- @[simp] lemma map_comp {c‚ÇÅ c‚ÇÇ c‚ÇÉ : C} {f : c‚ÇÅ ‚ü∂ c‚ÇÇ} {g : c‚ÇÇ ‚ü∂ c‚ÇÉ} :
-- X.map (g ‚â´ f) = (X.map g) ‚â´ (X.map f) := X.map_comp g f

-- @[simp] lemma map_comp' {c‚ÇÅ c‚ÇÇ c‚ÇÉ : C} {f : c‚ÇÅ ‚ü∂ c‚ÇÇ} {g : c‚ÇÇ ‚ü∂ c‚ÇÉ} :
-- X.map (@category.comp C _ _ _ _ f g) = (X.map g) ‚â´ (X.map f) := functor.map_comp X g f

end simp

set_option pp.universes true

instance : category.{(max u‚ÇÅ v‚ÇÅ)} (presheaf C) := by dunfold presheaf; apply_instance

def eval : C·µí·µñ ‚•§ presheaf C ‚•§ Type v‚ÇÅ :=
evaluation _ _

section adjoints
variables {C} {D : Type u‚ÇÇ} [ùíü : category.{v‚ÇÅ} D]
include ùíü

def precompose (F : C ‚•§ D) : presheaf D ‚•§ presheaf C :=
{ obj := Œª Y, F.op ‚ãô Y,
  map := Œª _ _ f, whisker_left _ f }

def left_kan_obj (F : C ‚•§ D) : presheaf C ‚Üí presheaf D :=
_

def left_kan_equiv (F : C ‚•§ D) (X Y) : (left_kan_obj F X ‚ü∂ Y) ‚âÉ (X ‚ü∂ (precompose F).obj Y) :=
_

def left_kan (F : C ‚•§ D) : presheaf C ‚•§ presheaf D :=
adjunction.left_adjoint_of_equiv (left_kan_equiv F) _

def right_kan (F : C ‚•§ D) : presheaf C ‚•§ presheaf D :=
{ obj := Œª X, yoneda.op ‚ãô (precompose F).op ‚ãô yoneda.obj X,
map := Œª _ _ Œ±, whisker_left _ $ whisker_left _ $ yoneda.map Œ± }

-- def right_kan_obj (F : C ‚•§ D) : presheaf C ‚Üí presheaf D :=
-- _

-- def right_kan_equiv (F : C ‚•§ D) (X Y) : ((precompose F).obj X ‚ü∂ Y) ‚âÉ (X ‚ü∂ right_kan_obj F Y) :=
-- _

def right_kan_adj (F : C ‚•§ D) : adjunction (precompose F) (right_kan F) := _

end adjoints

def presheaf_equivalence : ess_surj (yoneda : presheaf C ‚•§ presheaf (presheaf C)) :=
{ obj_preimage := Œª X,
  { obj := Œª c, _,
    map := _,
    map_id' := _,
    map_comp' := _ },
  iso' := _ }

section restriction_extension
variables {D : Type u‚ÇÇ} [ùíü : category.{v‚ÇÅ} D]
include ùíü

def restricted_yoneda (F : C ‚•§ D) : D ‚•§ presheaf C :=
{ obj := Œª d, F.op ‚ãô yoneda.obj d,
  map := Œª d‚ÇÅ d‚ÇÇ g, whisker_left _ $ yoneda.map g }

@[simp] lemma restricted_yoneda_obj (F : C ‚•§ D) (d : D) : (restricted_yoneda F).obj d = F.op ‚ãô yoneda.obj d := rfl
@[simp] lemma restricted_yoneda_map (F : C ‚•§ D) {d‚ÇÅ d‚ÇÇ : D} (g : d‚ÇÅ ‚ü∂ d‚ÇÇ) : (restricted_yoneda F).map g = (whisker_left _ $ yoneda.map g) := rfl

variables [has_colimits.{v} D]

def yoneda_extension (F : C ‚•§ D) : presheaf C ‚•§ D :=
{ obj := Œª X, colimit (comma.fst.{v v v v} yoneda (functor.of.obj X) ‚ãô F),
  map := Œª X‚ÇÅ X‚ÇÇ f, colimit.pre (comma.fst.{v v v v} yoneda (functor.of.obj X‚ÇÇ) ‚ãô F) (comma.map_right yoneda $ functor.of.map f),
  map_id' := Œª X,
  begin
    erw functor.of.map_id, -- why doesn't this simplify automatically?
    erw colimit.pre_map'
      (comma.fst.{v v v v} yoneda (functor.of.obj X) ‚ãô F)
      (comma.map_right_id.{v v v v} yoneda (functor.of.obj X)).hom,
    erw colimit.pre_id,
    erw ‚Üê colim.map_comp,
    erw ‚Üê colim.map_id,
    congr,
    tidy
  end,
  map_comp' := Œª X‚ÇÅ X‚ÇÇ X‚ÇÉ f g,
  begin
    erw colimit.pre_pre
      (comma.fst.{v v v v} yoneda (functor.of.obj X‚ÇÉ) ‚ãô F)
      (comma.map_right yoneda (functor.of.map g))
      (comma.map_right yoneda (functor.of.map f)),
    congr
  end }

@[simp] lemma yoneda_extension_obj (F : C ‚•§ D) (X : presheaf C) : (yoneda_extension F).obj X = colimit (comma.fst.{v v v v} yoneda (functor.of.obj X) ‚ãô F) := rfl
@[simp] lemma yoneda_extension_map (F : C ‚•§ D) {X‚ÇÅ X‚ÇÇ : presheaf C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) :
(yoneda_extension F).map f = colimit.pre (comma.fst.{v v v v} yoneda (functor.of.obj X‚ÇÇ) ‚ãô F) (comma.map_right yoneda $ functor.of.map f) := rfl

end restriction_extension

section map_comap
variables {D : Type v} [small_category D]

def comap (F : C ‚•§ D) : presheaf D ‚•§ presheaf C :=
restricted_yoneda (F ‚ãô yoneda)

-- def comap_obj_obj (F : C ‚•§ D) (Y : presheaf D) (c : C) : ((comap F).obj Y).obj c ‚âÖ (F.op ‚ãô Y).obj c :=
-- sorry

-- set_option pp.universes true

-- def comap_obj (F : C ‚•§ D) (Y : presheaf D) : (map F).obj Y ‚âÖ F.op ‚ãô Y :=
-- nat_iso.of_components
--   (Œª X, (yoneda_sections_small (F.obj X) Y))
--   (by { intros X‚ÇÅ X‚ÇÇ f,
--   have := (yoneda_lemma D).hom.naturality,
--   work_on_goal 1 { exact (F.op.obj X‚ÇÅ, Y) },
--   work_on_goal 1 { exact (F.op.obj X‚ÇÇ, Y) },
--   dsimp at this,
--   have foo := this (F.op.map f, ùüô Y),
--   dsimp [yoneda_evaluation] at foo,
--   simp at foo,
--   convert foo; delta ulift_functor; tidy, })

-- { hom :=
--   { app := Œª X,
--   begin
--     refine _ ‚â´ (@yoneda_sections_small C _inst_1 X (functor.op F ‚ãô Y)).hom,
--   end },
--   inv := _ }

lemma comap_map (F : C ‚•§ D) {Y‚ÇÅ Y‚ÇÇ : presheaf D} (g : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) : (comap F).map g = (whisker_left _ $ yoneda.map g) := rfl

def map' (F : C ‚•§ D) : presheaf C ‚•§ presheaf D :=
yoneda_extension (F ‚ãô yoneda)

lemma map_obj (F : C ‚•§ D) (X : presheaf C) :
(map' F).obj X = colimit (comma.fst.{v v v v} yoneda (functor.of.obj X) ‚ãô F ‚ãô yoneda) := rfl
lemma map_map (F : C ‚•§ D) {X‚ÇÅ X‚ÇÇ : presheaf C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) :
(map' F).map f = colimit.pre (comma.fst.{v v v v} yoneda (functor.of.obj X‚ÇÇ) ‚ãô F ‚ãô yoneda) (comma.map_right yoneda $ functor.of.map f) := rfl

end map_comap

end presheaf

end category_theory
