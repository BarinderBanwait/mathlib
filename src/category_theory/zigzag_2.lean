-- Copyright (c) 2019 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Scott Morrison

import category_theory.category
import category_theory.eq_to_hom
import category_theory.equivalence
import data.fin
import tactic

@[simp] lemma fin.last_val (n : ‚Ñï) : (fin.last n).val = n := rfl

lemma squeeze {a b : ‚Ñï} (h : a ‚â§ b) (h' : b < a + 1) : a = b :=
begin
  cases h, refl, linarith,
end


namespace tactic
meta def force {Œ± : Type} (t : tactic Œ±) : tactic Œ± :=
do gs ‚Üê get_goals,
   r ‚Üê t,
   gs' ‚Üê get_goals,
   guard (gs ‚â† gs') <|> fail "tactic succeeded, but did not change the goal",
   return r

namespace interactive
meta def force (t : itactic) := tactic.force t
end interactive
end tactic

open opposite

namespace category_theory

universes v‚ÇÅ u‚ÇÅ -- declare the `v`'s first; see `category_theory.category` for an explanation

def Œî := ‚Ñï
instance : category Œî :=
{ hom := Œª n m, { f : fin n ‚Üí fin m | monotone f},
  id := Œª n, ‚ü®id, by obviously‚ü©,
  comp := Œª l m n f g, ‚ü®g.val ‚àò f.val, by obviously‚ü© }

namespace Œî
instance  {n m : Œî} : has_coe_to_fun (n ‚ü∂ m) :=
{ F := Œª f, fin n ‚Üí fin m,
  coe := Œª f, f.val }

@[simp] lemma id_coe {n : Œî} (x : fin n) : ((ùüô n) : fin n ‚Üí fin n) x = x := rfl
@[simp] lemma comp_coe {l m n : Œî} (f : l ‚ü∂ m) (g : m ‚ü∂ n) (x : fin l) : (f ‚â´ g : fin l ‚Üí fin n) x = g (f x) := rfl
@[simp] lemma mk_coe {n m : Œî} (f : fin n ‚Üí fin m) (h) (x) : (‚ü®f, h‚ü© : n ‚ü∂ m) x = f x := rfl

@[extensionality] lemma hom_ext {n m : Œî} {f g : n ‚ü∂ m} (h : (f : fin n ‚Üí fin m) = g) : f = g :=
begin
  cases f,
  cases g,
  congr,
  assumption,
end

end Œî

def above {n m : Œî} (f : n ‚ü∂ m) (j : fin m) := { i : fin n | f i ‚â• j }

def T : Œî ‚•§ Œî :=
{ obj := Œª n, (n + 1 : ‚Ñï),
  map := Œª n m f,
  ‚ü®Œª i, if h : i.val < n then (f (i.cast_lt h)).cast_succ else fin.last _,
  Œª a b h,
  begin
    tidy,
    split_ifs,
    {tidy},
    {apply fin.le_last},
    {rw [fin.le_iff_val_le_val] at h,
    dsimp [(Œî)] at n, -- without this line linarith doesn't know that n : ‚Ñï and fails
    linarith},
    {apply fin.le_last}
  end‚ü©,
  map_id' :=
  Œª n, Œî.hom_ext (funext (Œª a,
  begin
    rw [Œî.mk_coe, Œî.id_coe],
    split_ifs,
    {tidy},
    {exact fin.eq_of_veq (eq.trans rfl (eq.symm (nat.eq_of_lt_succ_of_not_lt a.is_lt h)))}
  end)),
  map_comp' := sorry } -- see https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.60split_ifs.60.2C.20and.20nested.20.60dite.60/near/167593063

def Œî_ := ‚Ñï
instance : has_coe Œî_ Œî :=
{ coe := Œª n, (n + 1 : ‚Ñï) }

instance category_Œî_ : category Œî_ :=
{ hom := Œª n m, { f : fin (n+1) ‚Üí fin (m+1) | monotone f ‚àß f 0 = 0 ‚àß f (fin.last _) = fin.last _ },
  id := Œª n, ‚ü®id, by obviously‚ü©,
  comp := Œª l m n f g, ‚ü®g.val ‚àò f.val,
  by obviously,
  /- These two proofs aren't very good since the naming f_property_right_left is done automatically
  by tidy and could change is tidy was to change. -/
  by {tidy, rwa [f_property_right_left]},
  by {tidy, rwa [f_property_right_right]}‚ü© }.

def prime_obj (n : Œî) : Œî_·µí·µñ := op (n + 1 : ‚Ñï)
def prime_map_fn {n m : Œî} (f : n ‚ü∂ m) (j : fin (m + 2)) : fin (n + 2) := sorry
def prime_map {n m : Œî} (f : n ‚ü∂ m) : (prime_obj n) ‚ü∂ (prime_obj m) :=
begin
  apply has_hom.hom.op,
  fsplit,
  exact prime_map_fn f,
  sorry,
end

def prime : Œî ‚•§ Œî_·µí·µñ :=
{ obj := prime_obj,
  map := Œª n m f, prime_map f,
  map_id' := sorry,
  map_comp' := sorry }

namespace prime
instance : ess_surj prime := sorry
instance : full prime := sorry
instance : faithful prime := sorry

def is_equivalence : is_equivalence prime :=
  is_equivalence.of_fully_faithfully_ess_surj prime
end prime

variables (C : Type u‚ÇÅ) [ùíû : category.{v‚ÇÅ} C]
include ùíû

structure zigzag :=
(n : Œî)
(singular : fin n ‚Üí C)
(regular : fin (n+1) ‚Üí C)
(forwards : Œ† (i : fin n), regular (i.cast_succ) ‚ü∂ singular i)
(backwards : Œ† (i : fin n), regular (i.succ) ‚ü∂ singular i)

namespace zigzag

structure hom (X Y : zigzag.{v‚ÇÅ} C):=
(f : fin X.n ‚Üí fin Y.n)


end zigzag

end category_theory
