/-
Copyright (c) 2018 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison, Johannes H√∂lzl, Reid Barton, Sean Leather

Bundled type and structure.
-/
import category_theory.types category_theory.full_subcategory

universes v u‚ÇÅ u‚ÇÇ u‚ÇÉ

namespace category_theory

class concrete_category (C : Type u‚ÇÇ) extends category.{v} C :=
(forget : C ‚•§ Sort u‚ÇÅ)
[forget_faithful : faithful forget]

@[reducible] def forget (C : Type u‚ÇÇ) [concrete_category C] := concrete_category.forget C

attribute [instance] concrete_category.forget_faithful

instance concrete_category.types : concrete_category (Sort u‚ÇÇ) :=
{ forget := ùü≠ _ }

class has_forget (C : Type u‚ÇÇ) (D : Type u‚ÇÉ) [concrete_category.{v u‚ÇÅ} C] [concrete_category.{v u‚ÇÅ} D] :=
(forget‚ÇÇ : C ‚•§ D)
(forget_comp : forget‚ÇÇ ‚ãô (forget D) = forget C)

@[reducible] def forget‚ÇÇ (C D : Type u‚ÇÇ) [concrete_category.{v u‚ÇÅ} C] [concrete_category.{v u‚ÇÅ} D]
  [has_forget C D] : C ‚•§ D :=
has_forget.forget‚ÇÇ C D

instance forget_faithful (C D : Type u‚ÇÇ) [concrete_category.{v u‚ÇÅ} C] [concrete_category.{v u‚ÇÅ} D]
  [has_forget C D] : faithful (forget‚ÇÇ C D) :=
(has_forget.forget_comp C D).faithful_of_comp

instance induced_category.concrete_category {C : Type u‚ÇÇ} {D : Type u‚ÇÉ} [concrete_category D] (f : C ‚Üí D) :
  concrete_category (induced_category f) :=
{ forget := induced_functor f ‚ãô forget D }

instance induced_category.has_forget {C : Type u‚ÇÇ} {D : Type u‚ÇÉ} [concrete_category D] (f : C ‚Üí D) :
  has_forget (induced_category f) D :=
{ forget‚ÇÇ := induced_functor f,
  forget_comp := rfl }

def has_forget.mk' {C D : Type u‚ÇÇ} [concrete_category.{v u‚ÇÅ} C] [concrete_category.{v u‚ÇÅ} D]
  (obj : C ‚Üí D) (h_obj : ‚àÄ X, (forget D).obj (obj X) = (forget C).obj X)
  (map : ‚àÄ {X Y}, (X ‚ü∂ Y) ‚Üí (obj X ‚ü∂ obj Y))
  (h_map : ‚àÄ {X Y} {f : X ‚ü∂ Y}, (forget D).map (map f) == (forget C).map f) :
has_forget C D :=
{ forget‚ÇÇ := faithful.div _ _ _ @h_obj _ @h_map,
  forget_comp := by apply faithful.div_comp }

instance (C : Type u‚ÇÇ) [concrete_category.{u‚ÇÇ u‚ÇÇ} C] : has_forget C (Sort u‚ÇÇ) :=
{ forget‚ÇÇ := forget C,
  forget_comp := functor.comp_id _ }

/-- `bundled` is a type bundled with a type class instance for that type. Only
the type class is exposed as a parameter. -/
structure bundled (c : Type u‚ÇÇ ‚Üí Type v) : Type (max (u‚ÇÇ+1) v) :=
(Œ± : Type u‚ÇÇ)
(str : c Œ± . tactic.apply_instance)

namespace bundled

variables {c d : Type u‚ÇÇ ‚Üí Type v}

def of (Œ± : Type u‚ÇÇ) [str : c Œ±] : bundled c := ‚ü®Œ±, str‚ü©

instance : has_coe_to_sort (bundled c) :=
{ S := Type u‚ÇÇ, coe := bundled.Œ± }

/-- Map over the bundled structure -/
def map (f : ‚àÄ {Œ±}, c Œ± ‚Üí d Œ±) (b : bundled c) : bundled d :=
‚ü®b.Œ±, f b.str‚ü©

end bundled

class bundled_category {c : Type u‚ÇÇ ‚Üí Type u‚ÇÅ} (hom : Œ† {Œ± Œ≤}, c Œ± ‚Üí c Œ≤ ‚Üí Sort v) :=
(to_fun : Œ† {Œ± Œ≤} {ia : c Œ±} {ib : c Œ≤}, hom ia ib ‚Üí Œ± ‚Üí Œ≤)
(to_fun_inj : ‚àÄ {Œ± Œ≤} {ia : c Œ±} {ib : c Œ≤}, function.injective (@to_fun Œ± Œ≤ ia ib))
(id' : Œ† {Œ±} (ia : c Œ±), hom ia ia)
(to_fun_id' : Œ† {Œ±} (ia : c Œ±), to_fun (id' ia) = id)
(comp' : Œ† {Œ± Œ≤ Œ≥} {ia : c Œ±} {ib : c Œ≤} {ic : c Œ≥}, hom ib ic ‚Üí hom ia ib ‚Üí hom ia ic)
(to_fun_comp' : ‚àÄ {Œ± Œ≤ Œ≥} {ia : c Œ±} {ib : c Œ≤} {ic : c Œ≥} (f : hom ia ib) (g : hom ib ic),
                 to_fun (comp' g f) = (to_fun g) ‚àò (to_fun f))

namespace bundled_category

def of_hom_class {c : Type u‚ÇÇ ‚Üí Type u‚ÇÅ} (hom : Œ† {Œ± Œ≤}, c Œ± ‚Üí c Œ≤ ‚Üí (Œ± ‚Üí Œ≤) ‚Üí Prop)
  (h_id : ‚àÄ {Œ±} (ia : c Œ±), hom ia ia id)
  (h_comp : ‚àÄ {Œ± Œ≤ Œ≥} {ia : c Œ±} {ib : c Œ≤} {ic : c Œ≥} {g : Œ≤ ‚Üí Œ≥} {f : Œ± ‚Üí Œ≤} (hg : hom ib ic g)
    (hf : hom ia ib f), hom ia ic (g ‚àò f)) :
  bundled_category (Œª Œ± Œ≤ (ia : c Œ±) ib, subtype (hom ia ib)) :=
{ to_fun := Œª _ _ _ _, subtype.val,
  id' := Œª Œ± ia, ‚ü®id, h_id ia‚ü©,
  to_fun_id' := by intros; refl,
  comp' := Œª _ _ _ _ _ _ g f, ‚ü®g.1 ‚àò f.1, h_comp g.2 f.2‚ü©,
  to_fun_comp' := by intros; refl,
  to_fun_inj := by intros; apply subtype.eq }

variables {c : Type u‚ÇÇ ‚Üí Type u‚ÇÅ} (hom : Œ† {Œ± Œ≤}, c Œ± ‚Üí c Œ≤ ‚Üí Sort v) [h : bundled_category @hom]
include h

instance : has_hom.{v} (bundled c) := ‚ü®Œª Œ± Œ≤, @hom Œ± Œ≤ Œ±.str Œ≤.str‚ü©

protected def has_coe_to_fun (Œ± Œ≤ : bundled c) : has_coe_to_fun (Œ± ‚ü∂ Œ≤) :=
{ F := Œª _, Œ± ‚Üí Œ≤, coe := @to_fun c @hom h Œ±.1 Œ≤.1 Œ±.2 Œ≤.2}

local attribute [instance] bundled_category.has_coe_to_fun

lemma coe_def (Œ± Œ≤ : bundled c) (f : Œ± ‚ü∂ Œ≤) :
  (f : Œ± ‚Üí Œ≤) = @to_fun c @hom h Œ±.1 Œ≤.1 Œ±.2 Œ≤.2 f := rfl

instance : category_struct (bundled c) :=
{ id   := Œª Œ±, bundled_category.id' @hom Œ±.str,
  comp := by intros; apply h.comp'; assumption }

@[simp] lemma coe_comp {Œ± Œ≤ Œ≥ : bundled c} {f : Œ± ‚ü∂ Œ≤} {g : Œ≤ ‚ü∂ Œ≥} :
  (f ‚â´ g : Œ± ‚Üí Œ≥) = g ‚àò f :=
to_fun_comp' c f g

@[simp] lemma coe_id {Œ± : bundled c} : (ùüô Œ± : Œ± ‚Üí Œ±) = id := to_fun_id' @hom Œ±.str

-- `function.injective` doesn't work here
lemma coe_inj {Œ± Œ≤ : bundled c} {f g : Œ± ‚ü∂ Œ≤} (p : (f : Œ± ‚Üí Œ≤) = g) : f = g :=
to_fun_inj @hom p

instance : category (bundled c) :=
{ id_comp' := by intros; apply coe_inj; simp only [coe_comp, coe_id, function.comp.right_id],
  comp_id' := by intros; apply coe_inj; simp only [coe_comp, coe_id, function.comp.left_id],
  assoc'   := by intros; apply coe_inj; simp only [coe_comp] }

/-- Custom constructor for creating concrete categories on `bundled c` (e.g., `bundled monoid`) -/
instance to_concrete_category : concrete_category.{v} (bundled c) :=
{ forget := { obj := Œª Œ±, Œ±,
              map := Œª Œ± Œ≤ f, f,
              map_id' := by apply coe_id,
              map_comp' := by apply coe_comp },
  forget_faithful := { injectivity' := by apply coe_inj } }

variables {hom} (h) {d : Type u‚ÇÇ ‚Üí Type u‚ÇÅ} (h‚ÇÇ : ‚àÄ {Œ±}, d Œ± ‚Üí c Œ±)
include h‚ÇÇ

protected def restrict_str : bundled_category (Œª Œ± Œ≤ ia ib, hom (@h‚ÇÇ Œ± ia) (h‚ÇÇ ib)) :=
{ to_fun := by intros; apply h.to_fun; assumption,
  to_fun_inj := by intros; apply h.to_fun_inj,
  id' := by intros; apply h.id',
  to_fun_id' := by intros; apply h.to_fun_id',
  comp' := by intros; apply h.comp'; assumption,
  to_fun_comp' := by intros; apply h.to_fun_comp' }

def restrict_str_has_forget :
  @has_forget (bundled d) (bundled c) (by haveI := h.restrict_str @h‚ÇÇ; apply_instance) _ :=
{ forget‚ÇÇ := { obj := bundled.map @h‚ÇÇ, map := by intros; assumption },
  forget_comp := rfl }

end bundled_category

section functor
local attribute [instance] bundled_category.has_coe_to_fun

variables {c : Type u‚ÇÇ ‚Üí Type u‚ÇÅ} {hom_c : Œ† {Œ± Œ≤}, c Œ± ‚Üí c Œ≤ ‚Üí Sort v} [ùíû : bundled_category @hom_c]
          {d : Type u‚ÇÇ ‚Üí Type u‚ÇÅ} {hom_d : Œ† {Œ± Œ≤}, d Œ± ‚Üí d Œ≤ ‚Üí Sort v} [ùíü : bundled_category @hom_d]
          (obj : ‚àÄ {Œ±}, c Œ± ‚Üí d Œ±)
          (map : ‚àÄ {Œ± Œ≤ : bundled c}, (Œ± ‚ü∂ Œ≤) ‚Üí ((bundled.map @obj Œ±) ‚ü∂ (bundled.map @obj Œ≤)))
          (h_map : ‚àÄ {Œ± Œ≤ : bundled c} (f : Œ± ‚ü∂ Œ≤), ‚áë(map f) = (f : Œ± ‚Üí Œ≤))

include ùíû ùíü h_map

def bundled_has_forget : has_forget (bundled c) (bundled d) :=
has_forget.mk'
  (bundled.map @obj)
  (Œª _, rfl)
  @map
  (by intros; apply heq_of_eq; apply h_map)

end functor
end category_theory
