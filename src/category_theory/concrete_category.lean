/-
Copyright (c) 2018 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison, Johannes Hรถlzl, Reid Barton, Sean Leather

Bundled type and structure.
-/
import category_theory.types
import category_theory.bundled

universes u v

namespace category_theory
variables {c d : Type u โ Type v} {ฮฑ : Type u}


/--
`concrete_category @hom` collects the evidence that a type constructor `c` and a
morphism predicate `hom` can be thought of as a concrete category.

In a typical example, `c` is the type class `topological_space` and `hom` is
`continuous`.
-/
structure concrete_category (hom : out_param $ โ {ฮฑ ฮฒ}, c ฮฑ โ c ฮฒ โ (ฮฑ โ ฮฒ) โ Prop) :=
(hom_id : โ {ฮฑ} (ia : c ฮฑ), hom ia ia id)
(hom_comp : โ {ฮฑ ฮฒ ฮณ} (ia : c ฮฑ) (ib : c ฮฒ) (ic : c ฮณ) {g f}, hom ib ic g โ hom ia ib f โ hom ia ic (g โ f))

attribute [class] concrete_category

namespace bundled

variables (hom : โ {ฮฑ ฮฒ : Type u}, c ฮฑ โ c ฮฒ โ (ฮฑ โ ฮฒ) โ Prop)
variables [h : concrete_category @hom]
include h

instance : category.{u+1} (bundled c) :=
{ hom   := ฮป a b, subtype (hom a.2 b.2),
  id    := ฮป a, โจ@id a.1, h.hom_id a.2โฉ,
  comp  := ฮป a b c f g, โจg.1 โ f.1, h.hom_comp a.2 b.2 c.2 g.2 f.2โฉ }

variables {hom}
variables {X Y Z : bundled c}

@[simp] lemma concrete_category_id (X : bundled c) : subtype.val (๐ X) = id := rfl

@[simp] lemma concrete_category_comp (f : X โถ Y) (g : Y โถ Z) :
  subtype.val (f โซ g) = g.val โ f.val := rfl

instance : has_coe_to_fun (X โถ Y) :=
{ F   := ฮป f, X โ Y,
  coe := ฮป f, f.1 }

@[extensionality] lemma hom_ext  {f g : X โถ Y} : (โ x : X, f x = g x) โ f = g :=
ฮป w, subtype.ext.2 $ funext w

@[simp] lemma coe_id {X : bundled c} : ((๐ X) : X โ X) = id := rfl
@[simp] lemma coe_comp {X Y Z : bundled c} (f : X โถ Y) (g : Y โถ Z) (x : X) : (f โซ g) x = g (f x) := rfl
@[simp] lemma bundled_hom_coe (val : X โ Y) (prop) (x : X) :
  (โจval, propโฉ : X โถ Y) x = val x := rfl

end bundled

def concrete_functor
  {C : Type u โ Type v} {hC : โ{ฮฑ ฮฒ}, C ฮฑ โ C ฮฒ โ (ฮฑ โ ฮฒ) โ Prop} [concrete_category @hC]
  {D : Type u โ Type v} {hD : โ{ฮฑ ฮฒ}, D ฮฑ โ D ฮฒ โ (ฮฑ โ ฮฒ) โ Prop} [concrete_category @hD]
  (m : โ{ฮฑ}, C ฮฑ โ D ฮฑ) (h : โ{ฮฑ ฮฒ} {ia : C ฮฑ} {ib : C ฮฒ} {f}, hC ia ib f โ hD (m ia) (m ib) f) :
  bundled C โฅค bundled D :=
{ obj := bundled.map @m,
  map := ฮป X Y f, โจ f, h f.2 โฉ }

section forget
variables {C : Type u โ Type v} {hom : โฮฑ ฮฒ, C ฮฑ โ C ฮฒ โ (ฮฑ โ ฮฒ) โ Prop} [i : concrete_category hom]
include i

/-- The forgetful functor from a bundled category to `Sort`. -/
def forget : bundled C โฅค Type u := { obj := bundled.ฮฑ, map := ฮป a b h, h.1 }

instance forget.faithful : faithful (forget : bundled C โฅค Type u) :=
{ injectivity' :=
  begin
    rintros X Y โจf,_โฉ โจg,_โฉ p,
    congr, exact p,
  end }

end forget

end category_theory
