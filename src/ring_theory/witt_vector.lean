import data.list.basic
import data.set.finite
import data.nat.prime
import data.nat.choose
import data.mv_polynomial
import algebra.group_power
import group_theory.subgroup
import ring_theory.multiplicity

universes u v w u‚ÇÅ

-- ### FOR_MATHLIB
-- everything in this section should move to other files

section finset

variables {G : Type u} [comm_group G]
variables {H : Type v} [comm_group H]
variables (i : G ‚Üí H) [is_group_hom i]
variables {X : Type w} [decidable_eq X] (s : finset X) (f : X ‚Üí G)

-- This is finset.sum_hom

@[to_additive is_add_group_hom.map_finset_sum]
lemma is_group_hom.map_finset_prod : i (s.prod f) = s.prod (i ‚àò f) :=
begin
  apply finset.induction_on s,
  { exact is_group_hom.map_one i },
  { intros x s' hx ih,
    rw [finset.prod_insert hx, finset.prod_insert hx, is_group_hom.map_mul i, ‚Üêih] }
end

lemma dvd_sum {Œ± : Type*} {Œ≤ : Type*} [decidable_eq Œ±] [comm_ring Œ≤]
  (s : finset Œ±) (f : Œ± ‚Üí Œ≤) (b : Œ≤) (H : ‚àÄ a, b ‚à£ f a) :
  b ‚à£ s.sum f :=
by apply finset.induction_on s; intros; simp [*, dvd_add]

end finset

namespace mv_polynomial

open mv_polynomial

lemma eval‚ÇÇ_assoc {S : Type*} [decidable_eq S] [comm_ring S]
  {œÉ : Type*} [decidable_eq œÉ]
  {œÑ : Type*} [decidable_eq œÑ]
  {Œπ : Type*} [decidable_eq Œπ]
  (œÜ : œÉ ‚Üí mv_polynomial Œπ S) (q : œÑ ‚Üí mv_polynomial œÉ S)
  (p : mv_polynomial œÑ S) :
  eval‚ÇÇ C (eval‚ÇÇ C œÜ ‚àò q) p = eval‚ÇÇ C œÜ (eval‚ÇÇ C q p) :=
by { rw eval‚ÇÇ_comp_left (eval‚ÇÇ C œÜ), congr, funext, simp }

variables {R : Type*} {S : Type*} (f : R ‚Üí S) {Œπ : Type*}
variables [decidable_eq R] [comm_ring R]
variables [decidable_eq S] [comm_ring S]
variables [is_ring_hom f] [decidable_eq Œπ]

def coeff (m : Œπ ‚Üí‚ÇÄ ‚Ñï) (p : mv_polynomial Œπ R) : R := p.to_fun m

@[simp] lemma coeff_add (m : Œπ ‚Üí‚ÇÄ ‚Ñï) (p q : mv_polynomial Œπ R) :
  coeff m (p + q) = coeff m p + coeff m q := finsupp.add_apply

@[simp] lemma coeff_sub (m : Œπ ‚Üí‚ÇÄ ‚Ñï) (p q : mv_polynomial Œπ R) :
  coeff m (p - q) = coeff m p - coeff m q := finsupp.sub_apply

@[simp] lemma coeff_zero (m : Œπ ‚Üí‚ÇÄ ‚Ñï) :
  coeff m (0 : mv_polynomial Œπ R) = 0 := rfl

instance coeff.is_add_group_hom (m : Œπ ‚Üí‚ÇÄ ‚Ñï) :
  is_add_group_hom (coeff m : mv_polynomial Œπ R ‚Üí R) :=
‚ü®coeff_add m‚ü©

lemma ext (p q : mv_polynomial Œπ R) :
  (‚àÄ m, coeff m p = coeff m q) ‚Üí p = q := finsupp.ext
.

@[simp] lemma coeff_zero_X (i : Œπ) : coeff 0 (X i : mv_polynomial Œπ R) = 0 := rfl

lemma coeff_sum {X : Type*} (s : finset X) (f : X ‚Üí mv_polynomial Œπ R) (m : Œπ ‚Üí‚ÇÄ ‚Ñï) :
  coeff m (s.sum f) = s.sum (Œª x, coeff m (f x)) :=
begin
  apply (@finset.sum_hom _ _ _ _ _ _ _ _ _).symm,
  refine @is_add_group_hom.to_is_add_monoid_hom _ _ _ _ _ _,
end

lemma monic_monomial_eq (m) : monomial m (1:R) = (m.prod $ Œªn e, X n ^ e : mv_polynomial Œπ R) :=
by simp [monomial_eq]

@[simp] lemma coeff_monomial (m n) (r:R) :
  coeff m (monomial n r : mv_polynomial Œπ R) = if n = m then r else 0 :=
finsupp.single_apply

@[simp] lemma coeff_C_mul (m) (r : R) (p : mv_polynomial Œπ R) : coeff m (C r * p) = r * coeff m p :=
begin
  sorry
  -- conv in (r * _) { rw [‚Üê @finsupp.sum_single _ _ _ _ _ p, coeff_sum] },
  -- rw [finsupp.mul_def, C, finsupp.sum_single_index],
  -- { simp [coeff_single, finsupp.mul_sum, coeff_sum],
  --   apply sum_congr rfl,
  --   assume i hi, by_cases i = n; simp [h] },
  -- simp
end

lemma coeff_map
  (p : mv_polynomial Œπ R) (m : Œπ ‚Üí‚ÇÄ ‚Ñï) :
  coeff m (p.map f) = f (coeff m p) :=
begin
  delta map eval‚ÇÇ finsupp.sum,
  simp only [coeff_sum, coeff_C_mul],
  dsimp,
  sorry
  -- erw [‚Üê @finset.sum_hom (Œπ ‚Üí‚ÇÄ ‚Ñï) _ _ (p.support) (coeff m : mv_polynomial Œπ R ‚Üí R)],
  -- erw finsupp.sum_apply,
  -- simp [@is_add_group_hom.map_finset_sum (mv_polynomial Œπ R) _ R _ (coeff m) _ _ _ (p.support) _],
  -- (Œª (a : Œπ ‚Üí‚ÇÄ ‚Ñï), C (f (p a)) * finsupp.prod a (Œª (n : Œπ), pow (X n))),
end

lemma eval‚ÇÇ_sum' {X : Type*} [decidable_eq X] (s : finset X) (g : Œπ ‚Üí S)
  (i : X ‚Üí mv_polynomial Œπ R) :
  eval‚ÇÇ f g (s.sum i) = s.sum (Œª x, eval‚ÇÇ f g $ i x) :=
begin
  apply finset.induction_on s,
  { simp },
  { intros x' s' hx' IH,
    simp [finset.sum_insert hx', IH] }
end

@[simp] lemma C_pow (r : R) (n : ‚Ñï) :
  (C (r^n) : mv_polynomial Œπ R) = (C r)^n :=
by induction n; simp [pow_succ, *]

-- lemma eval‚ÇÇ_pow (g : Œπ ‚Üí S) (p : mv_polynomial Œπ R) (n : ‚Ñï) :
--   eval‚ÇÇ f g (p^n) = (eval‚ÇÇ f g p)^n :=
-- by induction n; simp [pow_succ, eval‚ÇÇ_mul, *]

end mv_polynomial

namespace pnat

instance : has_dvd ‚Ñï+ :=
‚ü®Œª a b, ‚àÉ c, b = a * c‚ü©

lemma dvd_iff_coe_dvd (a b : ‚Ñï+) :
  a ‚à£ b ‚Üî (a : ‚Ñï) ‚à£ b :=
begin
  split,
  { rintros ‚ü®c, rfl‚ü©, refine ‚ü®c, mul_coe _ _‚ü© },
  { rintros ‚ü®c, hc‚ü©,
    refine ‚ü®‚ü®c, _‚ü©, _‚ü©,
    { apply pos_of_mul_pos_left,
      { rw ‚Üê hc, exact b.2 },
      exact nat.zero_le _ },
    -- todo(jmc): provide ext for pnat
    cases a, cases b, congr, exact hc }
end

end pnat

-- ### end FOR_MATHLIB

-- proper start of this file

open mv_polynomial set

variables (s : set ‚Ñï+) (Œ± : Type u)

def witt_vectors := s ‚Üí Œ±

local notation `ùïé` := witt_vectors

def pnat.divisors (n : ‚Ñï+) : set ‚Ñï+ :=
{d | d ‚à£ n}

noncomputable instance pnat.divisors.fintype (n : ‚Ñï+) : fintype n.divisors :=
finite.fintype $ finite_of_finite_image (subtype.val_injective) $ finite_subset (finite_le_nat n) $
by { rintros _ ‚ü®_, ‚ü®c, rfl‚ü©, rfl‚ü©, exact nat.le_mul_of_pos_right c.property }

def set.is_truncation_set (s : set ‚Ñï+) : Prop :=
‚àÄ (n : ‚Ñï+), n ‚àà s ‚Üí n.divisors ‚äÜ s

def fintype.sum {Œ± : Type*} {Œ≤ : Type*} (f : Œ± ‚Üí Œ≤) [s : fintype Œ±] [add_comm_monoid Œ≤] :=
s.elems.sum f

variables [decidable_eq Œ±] [comm_ring Œ±]

noncomputable def witt_polynomial (hs : s.is_truncation_set) (n : s) :
  mv_polynomial s Œ± :=
fintype.sum (Œª (d : (n : ‚Ñï+).divisors),
  let d_in_s : (d : ‚Ñï+) ‚àà s := hs n n.property d.property in
  C d * (X ‚ü®d, d_in_s‚ü©)^((n : ‚Ñï)/d))

local attribute [class] nat.prime
variables (p : ‚Ñï) [nat.prime p]

lemma dvd_sub_pow_of_dvd_sub (a b : Œ±) (h : (p : Œ±) ‚à£ a - b) (k : ‚Ñï) :
  (p^(k+1) : Œ±) ‚à£ a^(p^k) - b^(p^k) :=
begin
  rcases h with ‚ü®c, hc‚ü©,
  rw sub_eq_iff_eq_add' at hc,
  replace hc := congr_arg (Œª x, x^(p^k)) hc,
  simp only [sub_eq_add_neg, add_pow] at hc,
  rw [finset.sum_range_succ, nat.choose_self, nat.cast_one, mul_one,
    nat.sub_self, pow_zero, mul_one] at hc,
  rw [hc, add_sub_cancel'], clear hc,
  apply dvd_sum,
  intros i,
  rw mul_assoc,
  rw mul_pow,
  conv { congr, skip, congr, skip, congr, rw mul_comm },
  apply dvd_mul_of_dvd_right,
  rw mul_assoc,
  apply dvd_mul_of_dvd_right,
  clear a b c,
  by_cases H : (p ^ k) < i,
  { simp [nat.choose_eq_zero_of_lt H] },

end

lemma foo (a b : Œ±) (h : ‚àÉ c, a = b + c * p) (k : ‚Ñï) :
  ‚àÉ d, a^(p^k) = b^(p^k) + d * (p^(k+1)) :=
begin
  rcases h with ‚ü®c, rfl‚ü©,
end

lemma prime_ne_zero : p ‚â† 0 := nat.pos_iff_ne_zero.mp $ nat.prime.pos ‚Äπ_‚Ä∫

open mv_polynomial

variables {R : Type u} [decidable_eq R] [comm_ring R]

theorem range_sum_eq_fin_univ_sum {Œ±} [add_comm_monoid Œ±] (f : ‚Ñï ‚Üí Œ±) (n) :
  (finset.range n).sum f = finset.univ.sum (Œª i : fin n, f i.1) :=
show _ = @multiset.sum Œ± _ ‚Üë(list.map _ _),
by rw [list.map_pmap, list.pmap_eq_map]; refl

def witt_polynomial' (n : ‚Ñï) : mv_polynomial ‚Ñï R :=
(finset.range (n+1)).sum (Œª i, (C p ^ i * X i ^ (p^(n-i))))

variables (R)
/- View a polynomial written in terms of basis of Witt polynomials
as a polynomial written in terms of the standard basis.-/
def from_W_to_X_basis : mv_polynomial ‚Ñï R ‚Üí mv_polynomial ‚Ñï R :=
eval‚ÇÇ C (witt_polynomial p)

instance from_W_to_X_basis.is_ring_hom : is_ring_hom (from_W_to_X_basis p R) :=
by delta from_W_to_X_basis; apply_instance

lemma witt_polynomial_zero : (witt_polynomial p 0 : mv_polynomial ‚Ñï R) = X 0 :=
begin
  delta witt_polynomial,
  simp [finset.sum_range_succ, finset.range_zero, finset.sum_empty],
end

lemma from_W_to_X_basis_W_n (n) : from_W_to_X_basis p R (X n) = witt_polynomial p n :=
by simp [from_W_to_X_basis]

variables {R}

-- We need p to be invertible for the following definitions
def X_in_terms_of_W : ‚Ñï ‚Üí mv_polynomial ‚Ñï ‚Ñö
| n := (X n - (finset.sum finset.univ (Œª i : fin n,
  have _ := i.2, (C p^i.val * (X_in_terms_of_W i.val)^(p^(n-i.val)))))) * C (1/p^n)

lemma X_in_terms_of_W_eq {n : ‚Ñï} : X_in_terms_of_W p n =
    (X n - (finset.range n).sum (Œª i, C p ^ i * X_in_terms_of_W p i ^ p ^ (n - i))) *
      C (1/p^n) :=
by rw [X_in_terms_of_W, range_sum_eq_fin_univ_sum]

/- View a polynomial written in terms of basis of Witt polynomials
as a polynomial written in terms of the standard basis.-/
def from_X_to_W_basis : mv_polynomial ‚Ñï ‚Ñö ‚Üí mv_polynomial ‚Ñï ‚Ñö :=
eval‚ÇÇ C (X_in_terms_of_W p)

instance from_X_to_W_basis.is_ring_hom : is_ring_hom (from_X_to_W_basis p) :=
by delta from_X_to_W_basis; apply_instance

lemma X_in_terms_of_W_zero : X_in_terms_of_W p 0 = witt_polynomial p 0 :=
begin
  rw X_in_terms_of_W_eq,
  rw finset.range_zero,
  rw finset.sum_empty,
  rw witt_polynomial_zero,
  simp
end

lemma X_in_terms_of_W_aux {n} : X_in_terms_of_W p n * C(p^n) =
  X n - (finset.range n).sum (Œª i, (C p)^i * (X_in_terms_of_W p i)^p^(n-i)) :=
begin
  rw [X_in_terms_of_W_eq, mul_assoc, ‚Üê C_mul],
  convert mul_one _,
  rw one_div_eq_inv,
  apply rat.inv_mul_cancel,
  exact pow_ne_zero _ (nat.cast_ne_zero.2 $ ne_of_gt (nat.prime.pos ‚Äπ_‚Ä∫))
end

section -- Kudos to Mario

theorem nat.semiring_hom_eq_cast {Œ±} [ring Œ±]
  (f : ‚Ñï ‚Üí Œ±) [is_semiring_hom f] (n : ‚Ñï) : f n = n :=
nat.eq_cast' _ (is_semiring_hom.map_one _) (Œª _ _, is_semiring_hom.map_add f) _

theorem int.ring_hom_eq_cast {Œ±} [ring Œ±]
  (f : ‚Ñ§ ‚Üí Œ±) [is_ring_hom f] (n : ‚Ñ§) : f n = n :=
int.eq_cast _ (is_ring_hom.map_one _) (Œª _ _, is_ring_hom.map_add f) _

theorem rat.ring_hom_unique {Œ±} [ring Œ±]
  (f g : ‚Ñö ‚Üí Œ±) [is_ring_hom f] [is_ring_hom g] (r : ‚Ñö) : f r = g r :=
rat.num_denom_cases_on' r $ Œª a b b0, begin
  rw [rat.mk_eq_div, int.cast_coe_nat],
  have b0' : (b:‚Ñö) ‚â† 0 := nat.cast_ne_zero.2 b0,
  have : ‚àÄ n : ‚Ñ§, f n = g n := Œª n,
    (int.ring_hom_eq_cast (f ‚àò int.cast) n).trans
    (int.ring_hom_eq_cast (g ‚àò int.cast) n).symm,
  calc f (a * b‚Åª¬π)
      = f a * f b‚Åª¬π * (g (b:‚Ñ§) * g b‚Åª¬π) : by rw [
    int.cast_coe_nat, ‚Üê is_ring_hom.map_mul g,
    mul_inv_cancel b0', is_ring_hom.map_one g, mul_one,
    is_ring_hom.map_mul f]
  ... = g a * f b‚Åª¬π * (f (b:‚Ñ§) * g b‚Åª¬π) : by rw [this a, ‚Üê this b]
  ... = g (a * b‚Åª¬π) : by rw [
    int.cast_coe_nat, mul_assoc, ‚Üê mul_assoc (f b‚Åª¬π),
    ‚Üê is_ring_hom.map_mul f, inv_mul_cancel b0',
    is_ring_hom.map_one f, one_mul,
    is_ring_hom.map_mul g]
end

end

lemma X_in_terms_of_W_prop'
  (f : mv_polynomial ‚Ñï ‚Ñö ‚Üí mv_polynomial ‚Ñï ‚Ñö) [is_ring_hom f]
  (fX : ‚àÄ (n : ‚Ñï), f (X n) = @witt_polynomial p _ ‚Ñö _ _ n)
  (n : ‚Ñï) : f (X_in_terms_of_W p n) = X n :=
begin
  have fC : ‚àÄ (a : ‚Ñö), f (C a) = C a,
  { intro a, show (f ‚àò C) a = _, apply rat.ring_hom_unique (f ‚àò C) C a },
  apply nat.strong_induction_on n,
  clear n, intros n H,
  rw [X_in_terms_of_W_eq],
  simp only [is_ring_hom.map_mul f, is_ring_hom.map_sub f, fC, fX, (finset.sum_hom f).symm],
  rw [finset.sum_congr rfl, (_ : @witt_polynomial p _ ‚Ñö _ _ n -
    (finset.range n).sum (Œª i, C p ^ i * X i ^ p ^ (n - i)) = C (p ^ n) * X n)],
  { rw [mul_right_comm, ‚Üê C_mul, mul_one_div_cancel, C_1, one_mul],
    exact pow_ne_zero _ (nat.cast_ne_zero.2 $ ne_of_gt (nat.prime.pos ‚Äπ_‚Ä∫)) },
  { simp [witt_polynomial, nat.sub_self],
    rw finset.sum_range_succ,
    simp },
  { intros i h,
    rw finset.mem_range at h,
    simp only [is_ring_hom.map_mul f, is_semiring_hom.map_pow f, fC, function.comp_app],
    rw H _ h }
end

lemma from_W_to_X_basis_comp_from_X_to_W_basis (f) :
  from_W_to_X_basis p _ (from_X_to_W_basis p f) = f :=
begin
  show (from_W_to_X_basis p _ ‚àò from_X_to_W_basis p) f = f,
  apply mv_polynomial.is_id,
  { apply_instance },
  { intro r,
    let : _ := _,
    refine @rat.ring_hom_unique _ _ _ _ this (by apply_instance) r,
    let F := (from_W_to_X_basis p _ ‚àò from_X_to_W_basis p),
    change is_ring_hom (Œª (r : ‚Ñö), F (C r)),
    show is_ring_hom (F ‚àò C),
    exact is_ring_hom.comp _ _ },
  { intro n,
    delta from_X_to_W_basis function.comp,
    erw eval‚ÇÇ_X,
    refine X_in_terms_of_W_prop' p _ _ n,
    intro k,
    erw from_W_to_X_basis_W_n p }
end

lemma X_in_terms_of_W_prop‚ÇÇ (k : ‚Ñï) : (witt_polynomial p k).eval‚ÇÇ C (X_in_terms_of_W p) = X k :=
begin
  suffices : from_X_to_W_basis p ((C p)^k * X k) +
    from_X_to_W_basis p (finset.sum (finset.range k) (Œª (i : ‚Ñï), (C p)^i * (X i)^p^(k-i))) = X k,
  { simpa [witt_polynomial, finset.sum_range_succ] },
  suffices : ‚àÄ i, from_X_to_W_basis p ((C p)^i * (X i)^p^(k-i)) =
    (C p)^i * (X_in_terms_of_W p i)^p^(k-i),
  { rw [is_ring_hom.map_mul (from_X_to_W_basis p),
        is_semiring_hom.map_pow (from_X_to_W_basis p),
        from_X_to_W_basis, eval‚ÇÇ_C, eval‚ÇÇ_X, X_in_terms_of_W_eq,
        mul_comm, mul_assoc, ‚Üê is_semiring_hom.map_pow C,
        ‚Üê C_mul, one_div_mul_cancel, C_1, mul_one,
        ‚Üê finset.sum_hom (eval‚ÇÇ C $ X_in_terms_of_W p),
        sub_add_eq_add_sub, sub_eq_iff_eq_add],
    congr,
    funext i,
    exact this i,
    all_goals { try {apply_instance} },
    { refine pow_ne_zero _ (nat.cast_ne_zero.2 $ ne_of_gt _),
      apply nat.prime.pos,
      assumption } },
  intro i,
  rw [is_ring_hom.map_mul (from_X_to_W_basis p),
      is_semiring_hom.map_pow (from_X_to_W_basis p),
      is_semiring_hom.map_pow (from_X_to_W_basis p),
      from_X_to_W_basis, eval‚ÇÇ_C, eval‚ÇÇ_X]
end

lemma X_in_terms_of_W_prop (n : ‚Ñï) : (X_in_terms_of_W p n).eval‚ÇÇ C (witt_polynomial p) = X n :=
begin
  change from_W_to_X_basis p ‚Ñö _ = X n,
  apply X_in_terms_of_W_prop',
  intro n,
  apply from_W_to_X_basis_W_n,
end

lemma from_X_to_W_basis_comp_from_W_to_X_basis (f) :
  from_X_to_W_basis p (from_W_to_X_basis p _ f) = f :=
begin
  show (from_X_to_W_basis p ‚àò from_W_to_X_basis p _) f = f,
  apply mv_polynomial.is_id,
  { apply_instance },
  { intro r,
    let : _ := _,
    refine @rat.ring_hom_unique _ _ _ _ this (by apply_instance) r,
    let F := (from_X_to_W_basis p ‚àò from_W_to_X_basis p _),
    change is_ring_hom (Œª (r : ‚Ñö), F (C r)),
    show is_ring_hom (F ‚àò C),
    exact is_ring_hom.comp _ _ },
  { intro n,
    delta from_W_to_X_basis function.comp,
    erw eval‚ÇÇ_X,
    delta from_X_to_W_basis,
    apply X_in_terms_of_W_prop‚ÇÇ }
end

lemma from_X_to_W_basis_X_n (n) : from_X_to_W_basis p (witt_polynomial p n) = X n :=
by simp only [from_X_to_W_basis, eval‚ÇÇ_X, X_in_terms_of_W_prop‚ÇÇ]

def to_W_basis : mv_polynomial ‚Ñï ‚Ñö ‚âÉr mv_polynomial ‚Ñï ‚Ñö :=
{ to_fun    := from_X_to_W_basis p,
  inv_fun   := from_W_to_X_basis p ‚Ñö,
  left_inv  := Œª _, from_W_to_X_basis_comp_from_X_to_W_basis _ _,
  right_inv := Œª _, from_X_to_W_basis_comp_from_W_to_X_basis _ _,
  hom       := by apply_instance }

def witt_structure_rat (Œ¶ : mv_polynomial bool ‚Ñö) : ‚Ñï ‚Üí mv_polynomial (bool √ó ‚Ñï) ‚Ñö :=
Œª n, eval‚ÇÇ C (Œª k : ‚Ñï,
   Œ¶.eval‚ÇÇ C (Œª b, ((witt_polynomial p k).eval (Œª i, X (b,i))))) (X_in_terms_of_W p n)

theorem witt_structure_prop (Œ¶ : mv_polynomial bool ‚Ñö) :
  ‚àÉ! (œÜ : ‚Ñï ‚Üí mv_polynomial (bool √ó ‚Ñï) ‚Ñö), ‚àÄ (n : ‚Ñï),
  (witt_polynomial p n).eval‚ÇÇ C œÜ =
    Œ¶.eval‚ÇÇ C (Œª b : bool, ((witt_polynomial p n).eval (Œª i : ‚Ñï, X (b,i)))) :=
begin
  refine ‚ü®witt_structure_rat p Œ¶, _, _‚ü©,
  { intro n,
    unfold witt_structure_rat,
    rw [‚Üê function.comp, eval‚ÇÇ_assoc, X_in_terms_of_W_prop‚ÇÇ p n, eval‚ÇÇ_X] },
  { intros œÜ H,
    unfold witt_structure_rat,
    funext n,
    rw show œÜ n = ((X_in_terms_of_W p n).eval‚ÇÇ C (witt_polynomial p)).eval‚ÇÇ C œÜ,
    { rw [X_in_terms_of_W_prop p, eval‚ÇÇ_X] },
    rw ‚Üê eval‚ÇÇ_assoc,
    unfold function.comp,
    congr,
    funext k,
    exact H k },
end

lemma witt_structure_rat_rec (Œ¶ : mv_polynomial bool ‚Ñö) (n) :
  (witt_structure_rat p Œ¶ n) * C (p^n) =
  Œ¶.eval‚ÇÇ C (Œª b, ((witt_polynomial p n).eval (Œª i, X (b,i)))) -
  (finset.range n).sum (Œª i, (C p)^i * (witt_structure_rat p Œ¶ i)^p^(n-i)) :=
begin
  have := @X_in_terms_of_W_aux p _ n,
  replace := congr_arg (eval‚ÇÇ C (Œª k : ‚Ñï,
  Œ¶.eval‚ÇÇ C (Œª b, ((witt_polynomial p k).eval (Œª i, X (b,i)))))) this,
  rw [eval‚ÇÇ_mul, eval‚ÇÇ_C] at this,
  convert this, clear this,
  simp only [eval‚ÇÇ_sub, eval‚ÇÇ_X],
  rw sub_left_inj,
  simp only [eval‚ÇÇ_sum'],
  apply finset.sum_congr rfl,
  intros i hi,
  rw [eval‚ÇÇ_mul, ‚Üê C_pow, ‚Üê C_pow, eval‚ÇÇ_C, eval‚ÇÇ_pow],
  refl
end

def has_integral_coeffs {Œπ : Type*} [decidable_eq Œπ] (p : mv_polynomial Œπ ‚Ñö) : Prop :=
  ‚àÄ m, (coeff m p).denom = 1

lemma witt_structure_rat_aux (Œ¶ : mv_polynomial bool ‚Ñö) (n : ‚Ñï) :
  has_integral_coeffs (witt_structure_rat p Œ¶ n) :=
begin
  apply nat.strong_induction_on n, clear n,
  intros n IH,
end

def witt_structure_int (Œ¶ : mv_polynomial bool ‚Ñ§) (n : ‚Ñï) : mv_polynomial (bool √ó ‚Ñï) ‚Ñ§ :=
finsupp.map_range rat.num (rat.coe_int_num 0) (witt_structure_rat p (map int.cast Œ¶) n)

lemma mv_polynomial.map_injective (I : Type*) [decidable_eq I] :
  function.injective (map int.cast : mv_polynomial I ‚Ñ§ ‚Üí mv_polynomial I ‚Ñö) :=
begin
  rw is_add_group_hom.injective_iff _,
  all_goals {try {apply_instance}},
  intros f hf,
  ext c,
  replace hf := congr_arg finsupp.to_fun hf,
  replace hf := congr_fun hf c,
  suffices : (f.to_fun c : ‚Ñö) = (0 : ‚Ñ§),
  { rw int.cast_inj at this, convert this, },
  convert hf,
  dsimp [map],
  sorry
end

-- #exit

lemma foo (Œ¶ : mv_polynomial bool ‚Ñ§) (n : ‚Ñï) :
  map (int.cast : ‚Ñ§ ‚Üí ‚Ñö) (witt_structure_int p Œ¶ n) = witt_structure_rat p (map int.cast Œ¶) n :=
begin
  apply nat.strong_induction_on n, clear n,
  delta witt_structure_int witt_structure_rat,
  intros n IH,
  rw X_in_terms_of_W_eq,
end

lemma witt_structure_int_prop.aux (Œ¶ : mv_polynomial bool ‚Ñ§) (n : ‚Ñï) :
  map int.cast ((witt_polynomial p n).eval‚ÇÇ C (witt_structure_int p Œ¶)) =
  (witt_polynomial p n).eval‚ÇÇ C (witt_structure_rat p (map int.cast Œ¶)) :=
begin
  induction n,
  -- apply nat.strong_induction_on n, clear n,
  -- intros n IH,
  { delta witt_polynomial,
    simp,
    delta witt_structure_int witt_structure_rat,
    dsimp [X_in_terms_of_W],
    -- simp [X_in_terms_of_W_zero, witt_polynomial_zero],
    -- rw eval‚ÇÇ_X,
},
end

lemma witt_structure_int_prop (Œ¶ : mv_polynomial bool ‚Ñ§) :
  ‚àÄ n, (map int.cast (witt_structure_int p Œ¶ n)) = witt_structure_rat p (map int.cast Œ¶) n :=
begin
  apply congr_fun,
  rw ‚Üê witt_structure_prop,
  intro n,
  apply nat.strong_induction_on n, clear n,
  intros n IH,
  delta witt_polynomial,
end
