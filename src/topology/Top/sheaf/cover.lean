import topology.Top.presheaf
import category_theory.full_subcategory
import category_theory.limits.opposites

universes v u

open category_theory
open category_theory.limits
open topological_space
open opposite

namespace Top

variables (X : Top.{v})

structure cover :=
(Œπ : Type v)
(i : Œπ ‚Üí opens X)

variables {X}

namespace cover

def total (c : cover X) : opens X := lattice.supr c.i

inductive intersections (Œπ : Type v)
| single : Œπ ‚Üí intersections
| double : Œπ ‚Üí Œπ ‚Üí intersections
.

variable (Œπ : Type v)

namespace intersections

inductive hom : intersections Œπ ‚Üí intersections Œπ ‚Üí Type v
| id_single : Œ† (a : Œπ), hom (single a) (single a)
| id_double : Œ† (a b : Œπ), hom (double a b) (double a b)
| left : Œ† (a b : Œπ), hom (single a) (double a b)
| right : Œ† (a b : Œπ), hom (single b) (double a b)
.

def id : Œ† j : intersections Œπ, hom Œπ j j
| (single a) := hom.id_single a
| (double a b) := hom.id_double a b
.

def comp : Œ† j‚ÇÅ j‚ÇÇ j‚ÇÉ : intersections Œπ, hom Œπ j‚ÇÅ j‚ÇÇ ‚Üí hom Œπ j‚ÇÇ j‚ÇÉ ‚Üí hom Œπ j‚ÇÅ j‚ÇÉ
| _ _ _ (hom.id_single _) x := x
| _ _ _ (hom.id_double _ _) x := x
| _ _ _ (hom.left a b) (hom.id_double _ _) := hom.left a b
| _ _ _ (hom.right a b) (hom.id_double _ _) := hom.right a b

local attribute [tidy] tactic.case_bash
instance : small_category (intersections Œπ) :=
{ hom := hom Œπ,
  id := id Œπ,
  comp := comp Œπ }

end intersections

open intersections

variable (c : cover X)

def diagram_obj : intersections (c.Œπ) ‚Üí (opens X)·µí·µñ
| (single a) := op (c.i a)
| (double a b) := op ((c.i a) ‚à© (c.i b))

@[simp] def diagram_map : Œ† (x y : intersections (c.Œπ)) (f : x ‚ü∂ y), diagram_obj c x ‚ü∂ diagram_obj c y
| _ _ (hom.id_single _)   := ùüô _
| _ _ (hom.id_double _ _) := ùüô _
| _ _ (hom.left a b)      := has_hom.hom.op ‚ü®‚ü®lattice.inf_le_left‚ü©‚ü© -- TODO lemma for this
| _ _ (hom.right a b)     := has_hom.hom.op ‚ü®‚ü®lattice.inf_le_right‚ü©‚ü©

section
local attribute [tidy] tactic.case_bash
def diagram : intersections (c.Œπ) ‚•§ (opens X)·µí·µñ :=
{ obj := diagram_obj c,
  map := diagram_map c, }
end.

@[simp] lemma diagram_obj_single (a) : c.diagram.obj (single a) = op (c.i a) := rfl
@[simp] lemma diagram_obj_double (a b) : c.diagram.obj (double a b) = op ((c.i a) ‚à© (c.i b)) := rfl

/-- The union of all the sets in the cover is the same as the union of all the sets and all the pairwise intersections. -/
lemma supr_eq_supr_diagram : lattice.supr (c.i) = lattice.supr ((functor.left_op (diagram c)).obj) :=
begin
  ext,
  split,
  { rintro ‚ü®U, ‚ü®‚ü®V, ‚ü®‚ü®i, rfl‚ü©, rfl‚ü©‚ü©, m‚ü©‚ü©,
    apply set.mem_of_subset_of_mem _ m,
    apply opens.subset_iff_val_subset.1,
    exact lattice.le_supr ((functor.left_op (diagram c)).obj) (op (single i)) },
  { rintro ‚ü®U, ‚ü®‚ü®V, ‚ü®‚ü®i, rfl‚ü©, rfl‚ü©‚ü©, w‚ü©‚ü©,
    apply set.mem_of_subset_of_mem _ w, clear w,
    apply opens.subset_iff_val_subset.1,
    -- Unfortunately the `op_induction` tactic doesn't work here:
    revert i,
    apply @opposite.op_induction (intersections (c.Œπ)) (Œª i, unop ((diagram c).obj (unop i)) ‚äÜ lattice.supr (c.i)),
    rintro (i | ‚ü®i‚ÇÅ,i‚ÇÇ‚ü©),
    { exact lattice.le_supr c.i i },
    { exact le_trans lattice.inf_le_left (lattice.le_supr c.i i‚ÇÅ) }}
end

/-- The limit of the intersection diagram in `(opens X)·µí·µñ` is just the union of the open sets. -/
lemma diagram_limit_total : limit (c.diagram) = op (c.total) :=
opens.op_eq_of_iso $ calc
    limit (c.diagram) ‚âÖ _         : limit_in_op_iso_op_colimit _
    ... ‚âÖ _                       : iso.op (colimit_in_complete_lattice _).symm
    ... ‚âÖ op (lattice.supr (c.i)) : iso.op (eq_to_iso (supr_eq_supr_diagram c))

variables {Y : Top.{v}}

/-- Pull back a cover by a continuous map. -/
def map (f : X ‚ü∂ Y) (c : cover Y) : cover X :=
{ Œπ := c.Œπ,
  i := Œª i, (opens.map f).obj (c.i i) }

/-- Pulling back an intersection diagram is just the intersection diagram for the pulled back cover. -/
def map_diagram (f : X ‚ü∂ Y) (c : cover Y) :
  c.diagram ‚ãô (opens.map f).op ‚âÖ (c.map f).diagram :=
{ hom := { app := Œª X, by { cases X; exact ùüô _ } },
  inv := { app := Œª X, by { cases X; exact ùüô _ } } }

end cover

end Top
