import group_theory.quotient_monoid

variables {Œ± : Type*} [monoid Œ±] {X : Type*} [comm_monoid X]
          {Z : Type*} [comm_monoid Z]

local notation `top` := (‚ä§ : submonoid X)

variables (X)

@[reducible] def completion := (submonoid.r (‚ä§ : submonoid X)).quotient

namespace completion

instance : has_coe (X √ó top) (completion X) := infer_instance

instance : has_inv (completion X) :=
‚ü®localization.lift top (Œª x, (((x.2 : X), (‚ü®x.1, set.mem_univ x.1‚ü© : top)) : completion X)) $
Œª a b ‚ü®w, hw‚ü©, con.eq.2 $ ‚ü®w, by dsimp; rw [mul_comm _ b.1, mul_comm _ a.1, hw]‚ü©‚ü©

def inv : completion X ‚Üí* completion X :=
‚ü®Œª x, x‚Åª¬π, rfl, Œª x y, by induction x; induction y; refl‚ü©

variables {X}

@[simp] lemma inv_apply (x :  X √ó top) :
(((x.2 : X), (‚ü®x.1, set.mem_univ x.1‚ü© : top)) : completion X) = x‚Åª¬π := rfl

@[simp] lemma coe_apply {x y : top} : (‚ü®x, set.mem_univ x‚ü© : top) * y = ‚ü®x*y, set.mem_univ (x*y)‚ü© :=
by tidy

@[simp] lemma one_eq {x : X} :
  ((x, (‚ü®x, set.mem_univ x‚ü© : top)) : completion X) = 1 :=
by {rw (show x = ((‚ü®x, set.mem_univ x‚ü© : top) : X), by tidy), apply localization.mk_self}

lemma mul_left_inv (x : completion X) : x‚Åª¬π * x = 1 :=
begin
  apply con.induction_on' x,
  rintro ‚ü®y1, y2‚ü©,
  rw [‚Üêinv_apply, ‚Üêlocalization.mk_apply, ‚Üêlocalization.mk_apply,
      localization.mk_mul_mk, mul_comm],
  apply one_eq,
end

instance : comm_group (completion X) :=
{  mul := (*),
   one := 1,
   one_mul := one_mul,
   mul_one := mul_one,
   mul_assoc := mul_assoc,
   inv := has_inv.inv,
   mul_left_inv := mul_left_inv,
   mul_comm := mul_comm}

lemma inj_of_group_of {G : Type*} [comm_group G] {x y : G}
(H : (x : completion G) = (y : completion G)) : x = y :=
by {cases con.eq.1 H with w hw, simp * at *}

lemma surj_of_group_of {G : Type*} [comm_group G] {y : completion G} :
  ‚àÉ x : G, (x : completion G) = y :=
begin
  apply con.induction_on' y,
  intro z,
  use z.1*(‚Üëz.2)‚Åª¬π,
  simp,
  use 1,
end

end completion



/-open category_theory

namespace CommGroup

@[reducible] def CommGroup : Type (u+1) := bundled comm_group

@[reducible] def is_comm_group_hom {Œ± : Type u} {Œ≤ : Type v} [comm_group Œ±] [comm_group Œ≤]
  (f : Œ± ‚Üí Œ≤) := is_group_hom f

instance to_comm_group (A : CommGroup) : comm_group A := A.str

instance concrete_is_comm_group_hom :
  concrete_category @is_comm_group_hom :=
‚ü®by introsI Œ± ia; apply_instance,
  by introsI Œ± Œ≤ Œ≥ ia ib ic f g hf hg; apply_instance‚ü©

instance hom_is_group_hom {G‚ÇÅ G‚ÇÇ : CommGroup} (f : G‚ÇÅ ‚ü∂ G‚ÇÇ) :
  is_comm_group_hom (f : G‚ÇÅ ‚Üí G‚ÇÇ) := f.2

instance of_comm_group_hom {Œ± : Type u} {Œ≤ : Type u} [comm_group Œ±]
  [comm_group Œ≤] (f : Œ± ‚Üí* Œ≤) : is_comm_group_hom f :=
{  to_is_mul_hom := ‚ü®f.3‚ü©}

instance to_CommGroup_hom {G‚ÇÅ G‚ÇÇ : CommGroup} :
  has_coe (G‚ÇÅ ‚Üí* G‚ÇÇ) (G‚ÇÅ ‚ü∂ G‚ÇÇ) := ‚ü®Œª f, subtype.mk f.1 (by apply_instance)‚ü©

def of (X : Type u) [comm_group X] : CommGroup := ‚ü®X‚ü©

lemma id_eq {G : CommGroup} : ùüô G = @monoid_hom.id G _ :=
by tidy

lemma comp_eq {G H J : CommGroup} (f : G ‚Üí* H) (g : H ‚Üí* J) :
  (comp g f : G ‚ü∂ J) = (f : G ‚ü∂ H) ‚â´ (g : H ‚ü∂ J) :=
by tidy

end CommGroup

namespace CommMonoid

@[reducible] def CommMonoid : Type (u+1) := bundled comm_monoid

@[reducible] def is_comm_monoid_hom {Œ± : Type u} {Œ≤ : Type v} [comm_monoid Œ±]
[comm_monoid Œ≤] (f : Œ± ‚Üí Œ≤) := is_monoid_hom f

instance to_comm_monoid (A : CommMonoid) : comm_monoid A := A.str

instance concrete_is_monoid_hom :
  concrete_category @is_monoid_hom :=
‚ü®by introsI Œ± ia; apply_instance,
  by introsI Œ± Œ≤ Œ≥ ia ib ic f g hf hg; apply_instance‚ü©

instance hom_is_monoid_hom {M‚ÇÅ M‚ÇÇ : CommMonoid} (f : M‚ÇÅ ‚ü∂ M‚ÇÇ) :
  is_comm_monoid_hom (f : M‚ÇÅ ‚Üí M‚ÇÇ) := f.2


instance of_comm_monoid_hom {Œ± : Type u} {Œ≤ : Type u} [comm_monoid Œ±]
[comm_monoid Œ≤] (f : Œ± ‚Üí* Œ≤) : is_comm_monoid_hom f :=
{ to_is_mul_hom := ‚ü®f.3‚ü©, map_one := f.2}

instance to_CommMonoid_hom {M‚ÇÅ M‚ÇÇ : CommMonoid} :
 has_coe (M‚ÇÅ ‚Üí* M‚ÇÇ) (M‚ÇÅ ‚ü∂ M‚ÇÇ) := ‚ü®Œª f, subtype.mk f.1 (by apply_instance)‚ü©

def of (X : Type u) [comm_monoid X] : CommMonoid := ‚ü®X‚ü©

end CommMonoid

section
open CommMonoid CommGroup fractions

variables {D E F : CommMonoid.{w}} (X : CommMonoid.{w}) (f : D ‚ü∂ E)
          {G H J : CommGroup.{x}} (g : G ‚ü∂ H)

@[reducible] def to_monoid_hom : D ‚Üí* E := ‚ü®f.1, f.2.2, f.2.1.1‚ü©

lemma to_monoid_hom_comp (g : E ‚ü∂ F) :
to_monoid_hom (f ‚â´ g) = comp (to_monoid_hom g) (to_monoid_hom f) :=
by tidy

lemma to_monoid_hom_inj (f g : D ‚ü∂ E) (H : to_monoid_hom f = to_monoid_hom g) : f = g :=
by tidy

lemma to_monoid_hom_eq (f : D ‚Üí* E) : to_monoid_hom (subtype.mk f (by apply_instance)) = f :=
by tidy

@[reducible] noncomputable def fractions_group_hom :
  fractions (‚ä§ : submonoid D) ‚Üí* fractions (‚ä§ : submonoid E) :=
mk' (group_of_fractions_hom $ comp (monoid_hom.of (‚ä§ : submonoid E)) $ to_monoid_hom f) $ map_mul _

@[reducible] noncomputable def to_CommGroup :
  CommGroup.of (fractions (‚ä§ : submonoid D)) ‚Üí* CommGroup.of (fractions (‚ä§ : submonoid E)) :=
fractions_group_hom f

@[reducible] noncomputable def fractions_hom_map :
  CommGroup.of (fractions (‚ä§ : submonoid D)) ‚ü∂ CommGroup.of (fractions (‚ä§ : submonoid E)) :=
to_CommGroup f

lemma comp_id_of {X : CommMonoid} :
  comp (monoid_hom.id _) (of (‚ä§ : submonoid X)) = of (‚ä§ : submonoid X) :=
by tidy

lemma group_hom_id {X : CommMonoid} :
  monoid_hom.id (CommGroup.of (fractions (‚ä§ : submonoid X))) = group_of_fractions_hom (of (‚ä§ : submonoid X)) :=
by change monoid_hom.id _ = group_of_fractions_hom (of _);
   apply group_hom_unique; exact comp_id_of

lemma group_of_fractions_hom_comp {X Y Z : CommMonoid} (f : X ‚Üí* Y) (g : Y ‚Üí* Z) :
  comp (comp (group_of_fractions_hom (comp (of (‚ä§ : submonoid Z)) g))
  (group_of_fractions_hom $ comp (of (‚ä§ : submonoid Y)) f)) (of (‚ä§ : submonoid X)) =
  comp (of (‚ä§ : submonoid Z)) (comp g f) :=
begin
  rw [group_hom_comp, comp_assoc],
  exact eq_of_of_comp_group_hom (comp (comp (of _) g) f),
end

lemma fractions_hom_id {X : CommMonoid} :
  (fractions_hom_map (ùüô X)) = ùüô (CommGroup.of (fractions ‚ä§)) :=
begin
  rw id_eq,
  ext,
  change group_of_fractions_hom (monoid_hom.comp (monoid_hom.of (‚ä§ : submonoid X))
         (to_monoid_hom (ùüô X))) x = monoid_hom.id (CommGroup.of (fractions (‚ä§ : submonoid X))) x,
  rw [group_hom_id, coe_apply, coe_apply],
  congr,
end

lemma fractions_hom_comp {X Y Z : CommMonoid} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
  fractions_hom_map f ‚â´ fractions_hom_map g  = fractions_hom_map (f ‚â´ g) :=
begin
  rw ‚Üêcomp_eq,
  congr,
  change comp (group_of_fractions_hom _) (group_of_fractions_hom _) =
         group_of_fractions_hom _,
  apply group_hom_unique,
  rw [to_monoid_hom_comp, group_of_fractions_hom_comp],
end

@[reducible] noncomputable def fractions_functor  : CommMonoid.{u} ‚•§ CommGroup.{u} :=
{  obj := Œª M, of (fractions (‚ä§ : submonoid M)),
   map := Œª _ _ f, fractions_hom_map f,
   map_id' := Œª _, fractions_hom_id,
   map_comp' := Œª _ _ _ f g, (fractions_hom_comp f g).symm}



/-
@[reducible] def forget_to_CommMonoid : CommGroup.{u} ‚•§ CommMonoid.{u} :=
{  obj := Œª G : CommGroup, @CommMonoid.of
                (G : Type u) (comm_group.to_comm_monoid G),
   map := Œª X Y f, (subtype.mk (to_monoid_hom f : (CommMonoid.of X ‚Üí* CommMonoid.of Y)) (by apply_instance))}


@[reducible] noncomputable def hom_equiv_to_fun {X : CommMonoid} {Y : CommGroup} (f : fractions_functor.obj X ‚ü∂ Y) :
  X ‚ü∂ forget_to_CommMonoid.obj Y :=
subtype.mk (monoid_hom.comp (monoid_hom.of (‚ä§ : submonoid X))
  (to_monoid_hom f : (monoid_hom (fractions_functor.obj X : Type u) Y))) (by apply_instance)


instance forget_CommGroup (G : CommGroup) : comm_group (forget_to_CommMonoid.obj G) := G.str
instance forget_is_group_hom {G H : CommGroup} (f : G ‚ü∂ H) : is_group_hom (forget_to_CommMonoid.map f) := f.property
instance monoid_of_forget (G : CommGroup) : comm_monoid (forget_to_CommMonoid.obj G) := infer_instance
instance forget_monoid_hom {M : CommMonoid} {G : CommGroup} (f : M ‚ü∂ forget_to_CommMonoid.obj G) :
  is_monoid_hom f := f.property

def id_of_forget {Y : CommGroup} : forget_to_CommMonoid.obj Y ‚Üím Y :=
{  to_fun := Œª y, (y : Y),
   mul := by tidy,
   one := by tidy}

@[reducible] noncomputable def hom_equiv_inv_fun {X : CommMonoid} {Y : CommGroup} (f : X ‚ü∂ forget_to_CommMonoid.obj Y) :
  fractions_functor.obj X ‚ü∂ Y :=
subtype.mk (group_of_fractions_hom (monoid_hom.comp (to_monoid_hom f) id_of_forget)) (by apply_instance)

lemma hom_equiv_left_inv {X : CommMonoid} {Y : CommGroup} (f : fractions_functor.obj X ‚ü∂ Y) :
f = hom_equiv_inv_fun (hom_equiv_to_fun f) :=
by apply to_group_hom_inj; rw to_group_hom_eq; apply group_hom_unique; tidy

lemma hom_equiv_right_inv {X : CommMonoid} {Y : CommGroup} (f : X ‚ü∂ forget_to_CommMonoid.obj Y) :
f = hom_equiv_to_fun (hom_equiv_inv_fun f) :=
by apply to_monoid_hom_inj;
   rw [to_monoid_hom_eq, hom_equiv_inv_fun, to_group_hom_eq, eq_of_of_comp_group_hom]; tidy

@[reducible] noncomputable def hom_equiv (X : CommMonoid) (Y : CommGroup) :
  (fractions_functor.obj X ‚ü∂ Y) ‚âÉ (X ‚ü∂ forget_to_CommMonoid.obj Y) :=
‚ü® hom_equiv_to_fun, hom_equiv_inv_fun, Œª f,
  by rw ‚Üê(hom_equiv_left_inv f), Œª f, by rw ‚Üê(hom_equiv_right_inv f)‚ü©

lemma hom_equiv_naturality_left_symm' {X' X : CommMonoid} {Y : CommGroup}
  (f : X' ‚ü∂ X) (g : X ‚ü∂ forget_to_CommMonoid.obj Y) :
  (hom_equiv X' Y).symm (f ‚â´ g) = fractions_functor.map f ‚â´ (hom_equiv X Y).symm g :=
begin
   rw [subtype.ext, equiv.coe_fn_symm_mk, equiv.coe_fn_symm_mk, bundled.concrete_category_comp],
   simp only [],
   rw (show monoid_hom.comp (to_monoid_hom (f ‚â´ g)) id_of_forget =
            monoid_hom.comp (to_monoid_hom f)
            (monoid_hom.comp (to_monoid_hom g) id_of_forget), by tidy),
   change _ = _ ‚àò (group_of_fractions_hom (monoid_hom.comp (to_monoid_hom f) (monoid_hom.of ‚ä§))),
   rw ‚Üêgroup_hom.comp_eq,
   exact group_hom.eq_of_fun _ _
     ((group_hom_comp (monoid_hom.comp (to_monoid_hom g) id_of_forget) (to_monoid_hom f)).symm),
end

noncomputable def fractions_adj_core : adjunction.core_hom_equiv fractions_functor forget_to_CommMonoid :=
‚ü®Œª X Y, hom_equiv X Y, Œª X' X Y, hom_equiv_naturality_left_symm', Œª X Y Y', by tidy‚ü©

noncomputable def fractions_adjunction : adjunction fractions_functor forget_to_CommMonoid :=
adjunction.mk_of_hom_equiv fractions_adj_core

end


section
open localization localization.fraction_ring classical
variables (R : Type u) [integral_domain R] [decidable_eq R]

def non_zero_divisors' : submonoid R :=
‚ü®non_zero_divisors R, Œª z hz, by rwa monoid.mul_one at hz,
 Œª x‚ÇÅ x‚ÇÇ hx‚ÇÅ hx‚ÇÇ z hz,
 have z * x‚ÇÅ * x‚ÇÇ = 0, by rwa monoid.mul_assoc,
 hx‚ÇÅ z $ hx‚ÇÇ (z * x‚ÇÅ) this‚ü©

lemma ne_zero_of_non_zero_divisors' {x : non_zero_divisors' R} : (x : R) ‚â† 0 :=
Œª hm, absurd (x.2 1 (by rw [hm.symm, monoid.one_mul]; finish)).symm zero_ne_one

local notation `fracR` := fractions (‚ä§ : submonoid (non_zero_divisors' R))
variables {R}
lemma of_inv_eq {x : non_zero_divisors' R} : (of (x : R) :  fraction_ring R)‚Åª¬π = mk 1 x :=
by tidy

lemma ne_zero_of {x : non_zero_divisors' R} : (of x : fraction_ring R) ‚â† 0 :=
Œª h, absurd (of.injective (by rwa ‚Üêof_zero at h)) (ne_zero_of_non_zero_divisors' R)

variables (R)

@[reducible] def fraction_ring_map : non_zero_divisors' R ‚Üí* units (fraction_ring R) :=
‚ü®Œª r, to_units r, by tidy, Œª x y, by tidy‚ü©

variables {R}

lemma map_eq : ‚áë(fraction_ring_map R) = Œª r, to_units r := rfl

lemma fraction_ring_mk_apply
  (x : R √ó non_zero_divisors R) : localization.mk x.1 x.2 = ‚ü¶x‚üß :=
by tidy

@[reducible] def aux_nonzero (a : R √ó non_zero_divisors' R) (Ha : a.1 ‚àà non_zero_divisors' R) :
  non_zero_divisors' R √ó (‚ä§ : submonoid (non_zero_divisors' R)) :=
prod.mk (‚ü®a.1, Ha‚ü© : non_zero_divisors' R) (‚ü®a.2, mem_top a.2‚ü© : (‚ä§ : submonoid (non_zero_divisors' R)))

lemma ne_zero_aux (a : R √ó non_zero_divisors R) (Ha : a.1 ‚â† 0) : (localization.mk a.1 a.2) ‚â† 0 :=
Œª h, absurd
(by rw [mk_eq, units.inv_eq_inv, to_units_coe, mul_eq_zero, inv_eq_zero, ‚Üêcoe_zero] at h;
    exact or.elim h (Œª hl, of.injective (show of a.1 = of 0, from hl))
      (Œª hr, absurd (of.injective (show localization.of ‚Üëa.2 = _, from hr))
                    (ne_zero_of_non_zero_divisors' R))) Ha

lemma surjective_aux (a : R √ó non_zero_divisors R) (Ha : a.1 ‚â† 0) :
  units.mk0 (localization.mk a.1 a.2) (ne_zero_aux a Ha) =
  (to_units (aux_nonzero a (mem_non_zero_divisors_iff_ne_zero.2 Ha)).1)*(to_units a.2)‚Åª¬π :=
by tidy

lemma eq_aux (x : fracR) :
aux (‚ä§ : submonoid (non_zero_divisors' R)) (fraction_ring_map R) (Œª x, ‚ü®(fraction_ring_map R x)‚Åª¬π, mul_left_inv _‚ü©) x =
(fraction_ring_map R x.2)‚Åª¬π * (fraction_ring_map R x.1) :=
begin
sorry,
end

#exit

lemma surjective_fraction_hom : ‚àÄ x‚â†(0 : fraction_ring R), ‚àÉ y : fracR, units.mk0 x H =
  fractions_hom ‚ä§ (fraction_ring_map R) (Œª x, ‚ü®(fraction_ring_map R x)‚Åª¬π, mul_left_inv _‚ü©) y :=
begin
intro x,
apply quotient.induction_on x,
intros,
have ha0 : a.1 ‚â† 0, from Œª h, absurd (eq.refl 0)
  (by rw [‚Üêfraction_ring_mk_apply, mk_eq, h, coe_zero, zero_mul, ne.def] at H; finish),
use fractions.mk (‚ä§ : submonoid (non_zero_divisors' R)) (aux_nonzero a (mem_coe.2 (mem_non_zero_divisors_iff_ne_zero.2 ha0))),
conv {to_lhs, congr, rw ‚Üêfraction_ring_mk_apply a},-- skip, whnf, rw aux_nonzero, simp only [map_eq]},
rw surjective_aux a ha0, rw coe_apply,
simp [map_eq], rw aux_nonzero,
conv {to_rhs, congr, whnf, congr, rw eq_of_left_inv (fraction_ring_map R (x.2 : _ )) (classical.some_spec _ _) (mul_left_inv _), simp, },
rw aux_nonzero,simp,
--suffices Hu : units.mk0 ‚ü¶a‚üß H = (fraction_ring_map (aux_nonzero a this).1) * (fraction_ring_map (aux_nonzero a this).2)‚Åª¬π, by
 --{simp * at *},
end

lemma universal_pred_of_fraction_ring :
  universal_pred ‚ä§ (fraction_ring_map R) (Œª x, ‚ü®(fraction_ring_map R x)‚Åª¬π, mul_left_inv _‚ü©) :=
sorry

def fractions_group_equiv : (units (fraction_ring R)) ‚âÉ* fractions (non_zero_divisors' R) :=
sorry

end


-/-/
