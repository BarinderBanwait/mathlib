import tactic.hygiene.iso_functorial

universes w‚ÇÅ v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

open category_theory

set_option pp.universes true

variables {C : Type u‚ÇÅ} [ùíû : category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [ùíü : category.{v‚ÇÇ} D]

section
include ùíû

class hygienic (p : C ‚Üí Prop) : Prop :=
(map : Œ† {X Y : C}, (X ‚âÖ Y) ‚Üí (p X ‚Üî p Y))

instance (p : C ‚Üí Prop) : subsingleton (hygienic.{v‚ÇÅ} p) :=
‚ü®by { rintros ‚ü®a‚ü© ‚ü®b‚ü©, congr }‚ü©

def hygienic_of_hygieinic_core (p : C ‚Üí Prop) [hygienic.{v‚ÇÅ} (p ‚àò of_core)] : hygienic.{v‚ÇÅ} p :=
{ map := Œª X Y f,
  begin
    have t := hygienic.map.{v‚ÇÅ} (p ‚àò of_core) (core.lift_iso f),
    exact t,
  end }

def hygienic_equiv_functorial (p : C ‚Üí Prop) : hygienic.{v‚ÇÅ} p ‚âÉ functorial.{v‚ÇÅ 0} (plift ‚àò p ‚àò (core.inclusion C).obj) :=
{ to_fun := Œª H, by exactI
  { map := Œª X Y f x, ‚ü®(hygienic.map p f).mp x.down‚ü© },
  inv_fun := Œª F, by exactI
  { map := Œª X Y f,
  begin
    split,
    intro h,
    have f' := functorial.map.{v‚ÇÅ 0} (plift ‚àò p ‚àò (core.inclusion C).obj) f,
    exact (f' ‚ü®h‚ü©).down,
    intro h,
    have f' := functorial.map.{v‚ÇÅ 0} (plift ‚àò p ‚àò (core.inclusion C).obj) f.symm,
    exact (f' ‚ü®h‚ü©).down,
  end },
  left_inv := by tidy,
  right_inv := by tidy }

def hygienic_not (p : C ‚Üí Prop) [hygienic.{v‚ÇÅ} p] : hygienic.{v‚ÇÅ} (Œª X, ¬¨ p X) :=
{ map := Œª X Y f,
  begin
    have ph := hygienic.map p f,
    finish,
  end }
def hygienic_and (p q : C ‚Üí Prop) [hygienic.{v‚ÇÅ} p] [hygienic.{v‚ÇÅ} q] : hygienic.{v‚ÇÅ} (Œª X, p X ‚àß q X) :=
{ map := Œª X Y f,
  begin
    have ph := hygienic.map p f,
    have qh := hygienic.map q f,
    finish,
  end }
def hygienic_or (p q : C ‚Üí Prop) [hygienic.{v‚ÇÅ} p] [hygienic.{v‚ÇÅ} q] : hygienic.{v‚ÇÅ} (Œª X, p X ‚à® q X) :=
{ map := Œª X Y f,
  begin
    have ph := hygienic.map p f,
    have qh := hygienic.map q f,
    finish,
  end }

def hygienic_forall (F : C ‚•§ Type w‚ÇÅ) (q : F.elements ‚Üí Prop) [hygienic.{v‚ÇÅ} q] :
  hygienic.{v‚ÇÅ} (Œª X : C, ‚àÄ a : F.obj X, q (as_element a)) :=
begin
  fsplit,
  intros X Y f,
  fsplit,
  { intros h a,
    have qh := hygienic.map.{v‚ÇÅ (max u‚ÇÅ w‚ÇÅ)} q,
    have t := qh (as_element_iso f.symm a),
    apply t.2,
    apply h, },
  { intros h a,
    have qh := hygienic.map.{v‚ÇÅ (max u‚ÇÅ w‚ÇÅ)} q,
    have t := qh (as_element_iso f a),
    apply t.2,
    apply h, },
end

def hygienic_exists (F : C ‚•§ Type w‚ÇÅ) (q : F.elements ‚Üí Prop) [hygienic.{v‚ÇÅ} q] :
  hygienic.{v‚ÇÅ} (Œª X : C, ‚àÉ a : F.obj X, q (as_element a)) :=
begin
  fsplit,
  intros X Y f,
  fsplit,
  { rintros ‚ü®a, h‚ü©,
    have qh := hygienic.map.{v‚ÇÅ (max u‚ÇÅ w‚ÇÅ)} q,
    have t := qh (as_element_iso f a),
    use F.map f.hom a,
    apply t.1,
    apply h, },
  { rintros ‚ü®a, h‚ü©,
    have qh := hygienic.map.{v‚ÇÅ (max u‚ÇÅ w‚ÇÅ)} q,
    have t := qh (as_element_iso f.symm a),
    use F.map f.inv a,
    apply t.1,
    apply h, },
end

end

def bundled_hygienic {m : Type u‚ÇÅ ‚Üí Type u‚ÇÅ} [category.{u‚ÇÅ} (bundled m)] (p : Œ† (Œ± : Type u‚ÇÅ), m Œ± ‚Üí Prop) : Prop :=
hygienic.{u‚ÇÅ u‚ÇÅ+1} (Œª (A : bundled m), p A.Œ± A.str)

attribute [class] bundled_hygienic

def hygienic_forall_forget (C : Type (u‚ÇÅ+1)) [concrete_category C]
  (q : Œ† (X : C), (forget C).obj X ‚Üí Prop) [hygienic.{u‚ÇÅ} (Œª X : (forget C).elements, q X.1 X.2)] :
    hygienic.{u‚ÇÅ} (Œª X : C, ‚àÄ a : (forget C).obj X, q X a) :=
hygienic_forall (forget C) (Œª e, q e.1 e.2)

instance hygienic_exists_functorial [category.{v‚ÇÅ} C] (f : C ‚Üí Type w‚ÇÅ) [functorial.{v‚ÇÅ w‚ÇÅ} f] (p : Œ† X : C, f X ‚Üí Prop)
  [hygienic.{v‚ÇÅ} (Œª e : (functor.of f).elements, p e.1 e.2)] :
    hygienic.{v‚ÇÅ} (Œª X : C, ‚àÉ a : f X, p X a) :=
hygienic_exists (functor.of f) (Œª e, p e.1 e.2)

instance hygienic_exists_iso_functorial' [category.{v‚ÇÅ} C] (f : C ‚Üí Type w‚ÇÅ) [iso_functorial.{v‚ÇÅ w‚ÇÅ} f] (p : Œ† X : C, f X ‚Üí Prop)
  [hygienic.{v‚ÇÅ} (Œª e : (as_core_functor f).elements, p (of_core e.1) e.2)] :
    hygienic.{v‚ÇÅ} (Œª X : core C, ‚àÉ a : f (of_core X), p (of_core X) a) :=
(hygienic_exists (as_core_functor f) (Œª e, p (of_core e.1) e.2))

def hygienic_exists_iso_functorial [category.{v‚ÇÅ} C] (f : C ‚Üí Type w‚ÇÅ) [iso_functorial.{v‚ÇÅ w‚ÇÅ} f] (p : Œ† X : C, f X ‚Üí Prop)
  [hygienic.{v‚ÇÅ} (Œª e : (as_core_functor f).elements, p (of_core e.1) e.2)] :
    hygienic.{v‚ÇÅ} (Œª X : C, ‚àÉ a : f X, p X a) :=
hygienic_of_hygieinic_core (Œª X : C, ‚àÉ a : f X, p X a)
