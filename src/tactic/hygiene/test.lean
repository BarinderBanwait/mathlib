import category_theory.types
import category_theory.core
import category_theory.concrete_category
import algebra.CommRing.basic
import ring_theory.ideals

universes v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

open category_theory

set_option pp.universes true

variables {C : Type u‚ÇÅ} [ùíû : category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [ùíü : category.{v‚ÇÇ} D]

section
include ùíû ùíü
class functorial (f : C ‚Üí D) :=
(map : Œ† {X Y : C}, (X ‚ü∂ Y) ‚Üí (f X ‚ü∂ f Y))
(map_id'   : ‚àÄ (X : C), map (ùüô X) = ùüô (f X) . obviously)
(map_comp' : ‚àÄ {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z), map (f ‚â´ g) = (map f) ‚â´ (map g) . obviously)

restate_axiom functorial.map_id'
attribute [simp] functorial.map_id
restate_axiom functorial.map_comp'
attribute [simp] functorial.map_comp

omit ùíü
instance (p : C ‚Üí Prop) : subsingleton (functorial.{v‚ÇÅ 0} (plift ‚àò p)) :=
‚ü®by { rintros ‚ü®a‚ü© ‚ü®b‚ü©, congr, ext, apply proof_irrel_heq, apply proof_irrel_heq, }‚ü©

end

section
include ùíû
class hygienic (p : C ‚Üí Prop) : Prop :=
(map : Œ† {X Y : C}, (X ‚âÖ Y) ‚Üí (p X ‚Üî p Y))

instance (p : C ‚Üí Prop) : subsingleton (hygienic.{v‚ÇÅ} p) :=
‚ü®by { rintros ‚ü®a‚ü© ‚ü®b‚ü©, congr }‚ü©

def hygienic_equiv_functorial (p : C ‚Üí Prop) : hygienic.{v‚ÇÅ} p ‚âÉ functorial.{v‚ÇÅ 0} (plift ‚àò p ‚àò core.inclusion.obj) :=
{ to_fun := Œª H, by exactI
  { map := Œª X Y f x, ‚ü®(hygienic.map p f).mp x.down‚ü© },
  inv_fun := Œª F, by exactI
  { map := Œª X Y f,
  begin
    split,
    intro h,
    have f' := functorial.map.{v‚ÇÅ 0} (plift ‚àò p ‚àò core.inclusion.obj) f,
    exact (f' ‚ü®h‚ü©).down,
    intro h,
    have f' := functorial.map.{v‚ÇÅ 0} (plift ‚àò p ‚àò core.inclusion.obj) f.symm,
    exact (f' ‚ü®h‚ü©).down,
  end },
  left_inv := by tidy,
  right_inv := by tidy }

def hygienic_not (p : C ‚Üí Prop) [hygienic.{v‚ÇÅ} p] : hygienic.{v‚ÇÅ} (Œª X, ¬¨ p X) :=
{ map := Œª X Y f,
  begin
    have ph := hygienic.map p f,
    finish,
  end }
def hygienic_and (p q : C ‚Üí Prop) [hygienic.{v‚ÇÅ} p] [hygienic.{v‚ÇÅ} q] : hygienic.{v‚ÇÅ} (Œª X, p X ‚àß q X) :=
{ map := Œª X Y f,
  begin
    have ph := hygienic.map p f,
    have qh := hygienic.map q f,
    finish,
  end }
def hygienic_or (p q : C ‚Üí Prop) [hygienic.{v‚ÇÅ} p] [hygienic.{v‚ÇÅ} q] : hygienic.{v‚ÇÅ} (Œª X, p X ‚à® q X) :=
{ map := Œª X Y f,
  begin
    have ph := hygienic.map p f,
    have qh := hygienic.map q f,
    finish,
  end }

end

def bundled_hygienic {m : Type u‚ÇÅ ‚Üí Type u‚ÇÅ} [category.{u‚ÇÅ} (bundled m)] (p : Œ† (Œ± : Type u‚ÇÅ), m Œ± ‚Üí Prop) : Prop :=
hygienic.{u‚ÇÅ u‚ÇÅ+1} (Œª (A : bundled m), p A.Œ± A.str)

attribute [class] bundled_hygienic

instance hygienic_zero_eq_one : bundled_hygienic.{u‚ÇÅ} (Œª (Œ± : Type u‚ÇÅ) [comm_ring Œ±], by exactI (0 : Œ±) = (1 : Œ±)) :=
begin
  dsimp [bundled_hygienic],
  fsplit,
  intros X Y f,
  fsplit,
  { intro h,
    haveI := f.hom.property,
    have t := congr_arg f.hom.val h,
    rw [is_ring_hom.map_zero f.hom.val] at t,
    rw [is_ring_hom.map_one f.hom.val] at t,
    exact t },
  { intro h,
    haveI := f.inv.property,
    have t := congr_arg f.inv.val h,
    rw [is_ring_hom.map_zero f.inv.val] at t,
    rw [is_ring_hom.map_one f.inv.val] at t,
    exact t },
end

instance : bundled_hygienic.{u‚ÇÅ} is_local_ring.{u‚ÇÅ} :=
begin
  have t : (is_local_ring = Œª (x : Type u‚ÇÅ) [comm_ring x], by exactI is_local_ring x), funext, refl,
  rw t,
  clear t,
  conv {
    congr, funext, dsimp [is_local_ring],
  },
  dsimp [bundled_hygienic],
  apply @hygienic_and _ _ _ _ _ _,
  apply @hygienic_not _ _ _ _,
  apply hygienic_zero_eq_one,
  sorry,
end


-- instance : functorial.{u‚ÇÅ u‚ÇÅ} local_ring.{u‚ÇÅ} :=
-- begin
--
-- end
