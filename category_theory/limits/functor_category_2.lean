import category_theory.limits.limits

open category_theory

namespace category_theory.limits

universes u v

variables {C : Type u} [ùíû : category.{u v} C]
include ùíû

variables {J K : Type v} [small_category J] [small_category K]

@[simp] def switched (F : J ‚•§ (K ‚•§ C)) : K ‚•§ (J ‚•§ C) :=
{ obj := Œª k,
  { obj := Œª j, (F j) k,
    map' := Œª j j' f, (F.map f) k,
    map_id' := Œª X, begin rw category_theory.functor.map_id, refl end,
    map_comp' := Œª X Y Z f g, by rw [functor.map_comp, ‚Üêfunctor.category.comp_app] },
  map' := Œª c c' f, { app := Œª j, (F j).map f, naturality' := Œª X Y g, by dsimp; rw ‚Üênat_trans.naturality } }.

@[simp] lemma switched_obj_map (F : J ‚•§ (K ‚•§ C)) {j j' : J} (f : j ‚ü∂ j') (X : K) : ((switched F) X).map f = (F.map f) X := rfl

@[simp] lemma cone.functor_w {F : J ‚•§ (K ‚•§ C)} (c : cone F) {j j' : J} (f : j ‚ü∂ j') (k : K) :
  (c.œÄ j) k ‚â´ (F.map f) k = (c.œÄ j') k :=
sorry

@[simp] def cone.pointwise {F : J ‚•§ (K ‚•§ C)} (c : cone F) (k : K) : cone ((switched F) k) :=
{ X := c.X k,
  œÄ  :=
  { app := Œª j, c.œÄ j k,
    naturality' := Œª j j' f, begin rw ‚Üê(c.w f), sorry, end } }


def is_limit_pointwise (F : J ‚•§ (K ‚•§ C)) (c : cone F) (h : is_limit c) (k : K) :
  is_limit (c.pointwise k) :=
{ lift := Œª s, (h.lift
  { X := functor.const K C s.X,
    œÄ :=
    { app := Œª j,
      { app := Œª k', begin sorry end,
        naturality' := sorry },
      naturality' := sorry }}).app k,
  fac' := sorry,
  uniq' := sorry }

-- variable [has_limits.{u v} C]

def is_limit_of_pointwise (F : J ‚•§ (K ‚•§ C)) (c : cone F) (h : Œ† k, is_limit (c.pointwise k)) :
  is_limit c :=
{ lift := Œª s,
  { app := Œª k, (h k).lift
    { X := s.X k,
      œÄ := Œª j, (s.œÄ j) k },
    naturality' := begin sorry end },
  fac' := begin tidy, end,
  uniq' := begin tidy, end, }

end category_theory.limits
