-- Copyright (c) 2018 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Scott Morrison, Reid Barton

import category_theory.limits

universes u v

open category_theory
open category_theory.limits

namespace category_theory.universal.types

variables {J : Type u} [ùí• : small_category J]
include ùí•

def limit (F : J ‚•§ Type u) : cone F :=
{ X := {u : Œ† j, F j // ‚àÄ (j j' : J) (f : j ‚ü∂ j'), F.map f (u j) = u j'},
  œÄ := Œª j u, u.val j }

attribute [extensionality] subtype.eq

def limit_is_limit (F : J ‚•§ Type u) : is_limit (limit F) :=
{ lift := Œª s v, ‚ü®Œª j, s.œÄ j v, Œª j j' f, congr_fun (s.w f) _‚ü©,
  uniq' :=
  begin
    tidy,
    have h := congr_fun (w x_1) x,
    exact h
  end }

instance : has_limits.{u+1 u} (Type u) :=
{ cone := @limit, is_limit := @limit_is_limit }

@[simp] lemma types_limit (F : J ‚•§ Type u) :
  limits.limit F = {u : Œ† j, F j // ‚àÄ j j' f, F.map f (u j) = u j'} := rfl
@[simp] lemma types_limit_œÄ (F : J ‚•§ Type u) (j : J) (g : (limit F).X) :
  limit.œÄ F j g = g.val j := rfl.
@[simp] lemma types_limit_pre (F : J ‚•§ Type u) {K : Type u} [ùí¶ : small_category K] (E : K ‚•§ J) (g : (limit F).X) :
  limit.pre F E g = (‚ü® Œª k, g.val (E k), by obviously ‚ü© : (limit (E ‚ãô F)).X) := rfl
@[simp] lemma types_limit_map {F G : J ‚•§ Type u} (Œ± : F ‚üπ G) (g : (limit F).X) :
  (lim.map Œ± : (limit F).X ‚Üí (limit G).X) g =
  (‚ü® Œª j, (Œ± j) (g.val j), Œª j j' f,
     by rw [‚Üêfunctor_to_types.naturality, ‚Üê(g.property j j' f)] ‚ü© : (limit G).X) :=
rfl
@[simp] lemma types_limit_lift (F : J ‚•§ Type u) (c : cone F) (x : c.X):
  limit.lift F c x = (‚ü® Œª j, c.œÄ j x, Œª j j' f, congr_fun (c.w f) x ‚ü© : (limit F).X) := rfl

def colimit (F : J ‚•§ Type u) : cocone F :=
{ X := @quot (Œ£ j, F j) (Œª p p', ‚àÉ f : p.1 ‚ü∂ p'.1, p'.2 = F.map f p.2),
  Œπ := Œª j x, quot.mk _ ‚ü®j, x‚ü©,
  w' := Œª j j' f, funext $ Œª x, eq.symm (quot.sound ‚ü®f, rfl‚ü©) }

local attribute [elab_with_expected_type] quot.lift

def colimit_is_colimit (F : J ‚•§ Type u) : is_colimit (colimit F) :=
{ desc := Œª s, quot.lift (Œª (p : Œ£ j, F j), s.Œπ p.1 p.2)
  (assume ‚ü®j, x‚ü© ‚ü®j', x'‚ü© ‚ü®f, hf‚ü©, by rw hf; exact (congr_fun (s.w f) x).symm) }

instance : has_colimits.{u+1 u} (Type u) :=
{ cocone := @colimit, is_colimit := @colimit_is_colimit }

@[simp] lemma types_colimit (F : J ‚•§ Type u) :
  limits.colimit F = @quot (Œ£ j, F j) (Œª p p', ‚àÉ f : p.1 ‚ü∂ p'.1, p'.2 = F.map f p.2) := rfl
@[simp] lemma types_colimit_Œπ (F : J ‚•§ Type u) (j : J) : colimit.Œπ F j = Œª x, quot.mk _ (‚ü®j, x‚ü© : (Œ£ j, F j)) := rfl.
-- TODO remaining lemmas:
@[simp] lemma types_colimit_pre
  (F : J ‚•§ Type u) {K : Type u} [ùí¶ : small_category K] (E : K ‚•§ J) (g : (colimit (E ‚ãô F)).X) :
  colimit.pre F E g = sorry := sorry
@[simp] lemma types_colimit_map {F G : J ‚•§ Type u} (Œ± : F ‚üπ G) :
  (colim.map Œ± : (colimit F).X ‚Üí (colimit G).X) =
  (quot.lift
    (Œª p : Œ£ (j : J), F j, quot.mk _ ‚ü® p.1, (Œ± p.1) p.2 ‚ü© )
    (Œª p p' r, begin tidy, end)) := sorry
-- @[simp] lemma types_colimit_lift (F : J ‚•§ Type u) (c : cocone F) (x : c.X) :
--   colimit.desc F c x = sorry := sorry
#print quot.lift
end category_theory.universal.types
