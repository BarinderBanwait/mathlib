import category_theory.limits.limits
import category_theory.limits.preserves
import category_theory.products

open category_theory

namespace category_theory.limits

universes u v

variables {C : Type u} [ùíû : category.{u v} C]
include ùíû

variables {J K : Type v} [small_category J] [small_category K]

def switched (F : J ‚•§ (K ‚•§ C)) : K ‚•§ (J ‚•§ C) :=
{ obj := Œª k,
  { obj := Œª j, (F j) k,
    map' := Œª j j' f, (F.map f) k,
    map_id' := Œª X, begin rw category_theory.functor.map_id, refl end,
    map_comp' := Œª X Y Z f g, by rw [functor.map_comp, ‚Üêfunctor.category.comp_app] },
  map' := Œª c c' f, { app := Œª j, (F j).map f, naturality' := Œª X Y g, by dsimp; rw ‚Üênat_trans.naturality } }.

@[simp] lemma switched_obj_map (F : J ‚•§ (K ‚•§ C)) {j j' : J} (f : j ‚ü∂ j') (X : K) : ((switched F) X).map f = (F.map f) X := rfl

@[simp] lemma cone.functor_w {F : J ‚•§ (K ‚•§ C)} (c : cone F) {j j' : J} (f : j ‚ü∂ j') (k : K) :
  (c.œÄ j) k ‚â´ (F.map f) k = (c.œÄ j') k :=
begin
  have h := congr_fun (congr_arg (nat_trans.app) (eq.symm (c.œÄ.naturality f))) k,
  dsimp at h,
  rw category.id_comp at h,
  conv at h { to_rhs, simp },
  erw ‚Üêh,
  conv { to_rhs, rw nat_trans.app_eq_coe }, -- yuck
  refl,
end

@[simp] def functor_category_limit_cone [has_limits_of_shape.{u v} J C] (F : J ‚•§ K ‚•§ C) : cone F :=
{ X := switched F ‚ãô lim,
  œÄ :=
  { app := Œª j,
    { app := Œª k , limit.œÄ _ j },
      naturality' := Œª j j' f, begin dsimp, simp, ext k, dsimp, erw limit.w, end } }

@[simp] def evaluate_functor_category_limit_cone [has_limits_of_shape.{u v} J C] (F : J ‚•§ K ‚•§ C) (k : K) :
  (evaluation K C k).map_cone (functor_category_limit_cone F) ‚âÖ limit.cone ((switched F) k) :=
begin
  ext,
  swap,
  tidy, -- FIXME why does tidy need the swap here??
end

def functor_category_is_limit_cone [has_limits_of_shape.{u v} J C] (F : J ‚•§ K ‚•§ C) :
  is_limit (functor_category_limit_cone F) :=
{ lift := Œª s,
  { app := Œª k, limit.lift ((switched F) k)
    { X := s.X k,
      œÄ := { app := Œª j, s.œÄ j k } },
    naturality' := Œª k k' f,
    begin
      ext, dsimp, simp, rw ‚Üêcategory.assoc, simp, rw nat_trans.naturality, refl,
    end },
  uniq' := Œª s m w,
  begin
    ext k j, dsimp, simp,
    rw ‚Üê w j,
    refl
  end }

instance functor_category_has_limits_of_shape [has_limits_of_shape.{u v} J C] : has_limits_of_shape J (K ‚•§ C) :=
{ cone := Œª F, functor_category_limit_cone F,
  is_limit := Œª F, functor_category_is_limit_cone F }

instance evaluation_preserves_limits [has_limits_of_shape.{u v} J C] (k : K) :
  preserves_limits_of_shape J (evaluation.{v v u v} K C k) :=
{ preserves := Œª F c h,
  begin
    have i : functor_category_limit_cone F ‚âÖ c := limit_cone.ext (functor_category_is_limit_cone F) h,
    apply is_limit_invariance _ _ (functor.on_iso _ i),

    -- Next, we know exactly what the evaluation of the `product_cone F` is:
    apply is_limit_invariance _ _ (evaluate_functor_category_limit_cone F k).symm,

    -- Finally, it's just that the limit cone is a limit.
    exact limit.universal_property _
  end }

end category_theory.limits
