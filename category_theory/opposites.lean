-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Stephen Morgan, Scott Morrison

import category_theory.products
import category_theory.types

namespace category_theory

universes u‚ÇÅ v‚ÇÅ u‚ÇÇ v‚ÇÇ

def op (C : Type u‚ÇÅ) : Type u‚ÇÅ := C

notation C `·µí·µñ`:80 := op C

variables {C : Type u‚ÇÅ} [ùíû : category.{u‚ÇÅ v‚ÇÅ} C]
include ùíû

instance opposite : category.{u‚ÇÅ v‚ÇÅ} (C·µí·µñ) :=
{ hom  := Œª X Y : C, Y ‚ü∂ X,
  comp := Œª _ _ _ f g, g ‚â´ f,
  id   := Œª X, ùüô X }

def op_op : (C·µí·µñ)·µí·µñ ‚•§ C :=
{ obj := Œª X, X,
  map := Œª X Y f, f }

-- TODO this is an equivalence

namespace functor

variables {D : Type u‚ÇÇ} [ùíü : category.{u‚ÇÇ v‚ÇÇ} D]
include ùíü

variables (C D)

definition op_hom : (C ‚•§ D)·µí·µñ ‚•§ (C·µí·µñ ‚•§ D·µí·µñ) :=
{ obj := Œª F : C ‚•§ D,
  { obj       := Œª X, F.obj X,
    map       := Œª X Y f, F.map f,
    map_id'   := begin /- `obviously'` says: -/ intros, erw [map_id], refl, end,
    map_comp' := begin /- `obviously'` says: -/ intros, erw [map_comp], refl end },
  map := Œª F G Œ±,
  { app := Œª X, Œ±.app X,
    naturality' := Œª X Y f, eq.symm (Œ±.naturality f) } }

namespace op_hom
@[simp] lemma map_app {F G : (C ‚•§ D)·µí·µñ} (Œ± : F ‚ü∂ G) (X : C) : ((op_hom C D).map Œ±).app X = Œ±.app X := rfl
end op_hom

definition op_inv : (C·µí·µñ ‚•§ D·µí·µñ) ‚•§ (C ‚•§ D)·µí·µñ :=
{ obj := Œª F : C·µí·µñ ‚•§ D·µí·µñ,
  { obj       := Œª X, F.obj X,
    map       := Œª X Y f, F.map f,
    map_id'   := begin /- `obviously'` says: -/ intros, erw [map_id], refl, end,
    map_comp' := begin /- `obviously'` says: -/ intros, erw [map_comp], refl end },
  map := Œª F G Œ±,
  { app := Œª X : C, Œ±.app X,
    naturality' := Œª X Y f, eq.symm (Œ±.naturality f) } }

namespace op_inv
@[simp] lemma map_app {F G : C·µí·µñ ‚•§ D·µí·µñ} (Œ± : F ‚ü∂ G) (X : C) : ((op_inv C D).map Œ±).app X = Œ±.app X := rfl
end op_inv

-- TODO show these form an equivalence

variables {C D}

protected definition op (F : C ‚•§ D) : C·µí·µñ ‚•§ D·µí·µñ := (@op_hom C _ D _).obj (F : (C ‚•§ D)·µí·µñ)

@[simp] lemma opposite_obj (F : C ‚•§ D) (X : C) : (F.op).obj X = F.obj X := rfl
@[simp] lemma opposite_map (F : C ‚•§ D) {X Y : C} (f : X ‚ü∂ Y) : (F.op).map f = F.map f := rfl

end functor

namespace functor
variable (C)

/-- `functor.hom` is the hom-pairing, sending (X,Y) to X ‚Üí Y, contravariant in X and covariant in Y. -/
definition hom : (C·µí·µñ √ó C) ‚•§ (Type v‚ÇÅ) :=
{ obj       := Œª p, @category.hom C _ p.1 p.2,
  map       := Œª X Y f, Œª h, f.1 ‚â´ h ‚â´ f.2,
  map_id'   := begin /- `obviously'` says: -/ intros, ext, intros, cases X, dsimp at *, simp, erw [category.id_comp] end,
  map_comp' := begin /- `obviously'` says: -/ intros, ext, intros, cases f, cases g, cases X, cases Y, cases Z, dsimp at *, simp, erw [category.assoc] end }

@[simp] lemma hom_obj (X : C·µí·µñ √ó C) : (functor.hom C).obj X = @category.hom C _ X.1 X.2 := rfl
@[simp] lemma hom_pairing_map {X Y : C·µí·µñ √ó C} (f : X ‚ü∂ Y) : (functor.hom C).map f = Œª h, f.1 ‚â´ h ‚â´ f.2 := rfl

end functor

end category_theory